[
  {
    "title": "Shadcn/UI Codegen",
    "description": "Code generator based on Shadcn/UI",
    "fullStack": "React",
    "guides": [
      "Generate a login page",
      "Generate a Table component, include 3 columns: name, age, address"
    ],
    "model": "gpt-4o",
    "codeRendererUrl": "http://localhost:3001",
    "rules": [
      {
        "type": "public-components",
        "description": "Define which public components to use",
        "dataSet": ["shadcn/ui"]
      },
      {
        "type": "styles",
        "description": "Define the rules for generating styles",
        "prompt": "Styles must be written using tailwindcss with full dark/light mode compatibility. Use Tailwind's dark mode utilities (dark:class-name) for theme variants. Prefer using color-scheme-neutral classes or theme-specific variants (dark:bg-gray-800/light:bg-white) to ensure consistent appearance in both dark and light modes."
      },
      {
        "type": "attention-rules",
        "description": "Attention rules for the code generator",
        "prompt": "Only use the following npm packages in the generated code: react, react-dom, lucide-react, next/link, next/image, @/lib/utils, framer-motion, react-hook-form, recharts, zod, and components from @/components/ui/* (shadcn base components). Do not import or use any other packages. Specifically, DO NOT use @hookform/resolvers/zod package - instead, manually set up form validation with zod without using this resolver."
      }
    ]
  },
  {
    "title": "Ant Design Codegen",
    "description": "Code generator based on React and Ant Design",
    "fullStack": "React",
    "guides": [
      "Generate a login page",
      "Generate a Table component, include 3 columns: name, age, address"
    ],
    "model": "gpt-4o",
    "codeRendererUrl": "http://localhost:3002",
    "rules": [
      {
        "type": "public-components",
        "description": "Define which public components to use",
        "dataSet": ["antd", "@ant-design/icons"]
      },
      {
        "type": "styles",
        "description": "Define the rules for generating styles",
        "prompt": "Use styled-components for styles"
      },
      {
        "type": "file-structure",
        "description": "Define the file structure for the project",
        "prompt": "Output component code in XML format as follows:\n<ComponentArtifact name=\"ComponentName\">\n  <ComponentFile fileName=\"App.tsx\" isEntryFile=\"true\">\n    import { ComponentName } from './ComponentName';\n    \n    const mockProps = {\n      // Define mock data here\n    };\n    \n    export default function App() {\n      return <ComponentName {...mockProps} />;\n    }\n  </ComponentFile>\n  \n  <ComponentFile fileName=\"[ComponentName].tsx\">\n    // Main component implementation\n    // Split into multiple files if exceeds 500 lines\n    export const ComponentName = () => {\n      // Component implementation\n    }\n  </ComponentFile>\n\n  <ComponentFile fileName=\"helpers.ts\">\n    // Helper functions (optional)\n  </ComponentFile>\n\n  <ComponentFile fileName=\"interface.ts\">\n    // Type definitions for component props\n    // All API-interacting data must be defined as props:\n    // - initialData for component initialization\n    // - onChange, onSave, onDelete etc. for data modifications\n  </ComponentFile>\n  <ComponentFile fileName=\"styles.ts\">\n    // Styles for the component, must be written using styled-components only\n  </ComponentFile>\n</ComponentArtifact>"
      },
      {
        "type": "attention-rules",
        "description": "Attention rules for the code generator",
        "prompt": "Only use the following npm packages in the generated code: react, react-dom, antd, @ant-design/icons, styled-components. Do not import or use any other packages. When importing from 'antd' and '@ant-design/icons', ONLY use named imports like: import { Button, TextField } from 'antd'; import { Delete, Edit } from '@ant-design/icons'; - DO NOT use default imports, namespace imports, or side effect imports for these packages."
      }
    ]
  },
  {
    "title": "Mui Codegen",
    "description": "Code generator based on React and Mui",
    "fullStack": "React",
    "guides": [
      "Generate a login page",
      "Generate a Table component, include 3 columns: name, age, address"
    ],
    "model": "gpt-4o",
    "codeRendererUrl": "http://localhost:3003",
    "rules": [
      {
        "type": "public-components",
        "description": "Define which public components to use",
        "dataSet": ["@mui/material", "@mui/icons-material"]
      },
      {
        "type": "styles",
        "description": "Define the rules for generating styles",
        "prompt": "All styles must be written using sx prop only"
      },
      {
        "type": "attention-rules",
        "description": "Attention rules for the code generator",
        "prompt": "Only use the following npm packages in the generated code: react, react-dom, @mui/material, @mui/icons-material, @mui/x-date-pickers, @mui/x-tree-view. Do not import or use any other packages. When importing from '@mui/material' and '@mui/icons-material', ONLY use named imports like: import { Button, TextField } from '@mui/material'; import { Delete, Edit } from '@mui/icons-material'; - DO NOT use default imports, namespace imports, or side effect imports for these packages."
      }
    ]
  },
  {
    "title": "Element Plus Codegen",
    "description": "Code generator based on Element Plus",
    "fullStack": "Vue",
    "guides": [
      "Generate a login page",
      "Generate a Table component, include 3 columns: name, age, address"
    ],
    "model": "gpt-4o",
    "codeRendererUrl": "http://localhost:3004",
    "rules": [
      {
        "type": "public-components",
        "description": "Define which public components to use",
        "dataSet": ["element-plus"]
      },
      {
        "type": "file-structure",
        "description": "Define the file structure for the project",
        "prompt": "Output component code in XML format as follows: <ComponentArtifact name=\"ComponentName\"><ComponentFile fileName=\"App.vue\" isEntryFile=\"true\"><template>\n  <!-- Write template content here -->\n</template>\n\n<script>\n// Import required components and dependencies\nimport { ... } from '...'\n\nexport default {\n  name: 'ComponentName',\n  \n  components: {\n    // Register components\n  },\n\n  props: {\n    // Component properties\n    // IMPORTANT: Every prop MUST include a default value\n    propName: {\n      type: Type,\n      default: defaultValue,\n      required: false\n    }\n  },\n  \n  data() {\n    return {\n      // Component data\n    }\n  },\n  \n  computed: {\n    // Computed properties\n  },\n  \n  methods: {\n    // Methods\n  }\n}\n</script>\n\n<style scoped>\n/* Component styles */\n/* IMPORTANT: Do NOT use @apply in styles. Write CSS rules directly. */\n</style></ComponentFile></ComponentArtifact>\n\nIMPORTANT RULES:\n1. Every prop MUST include a default value\n2. Do NOT use @apply in styles. Write CSS rules directly."
      }
    ]
  },
  {
    "title": "Private Component Codegen",
    "description": "Code generator based on private components",
    "fullStack": "React",
    "guides": [
      "Generate a login page",
      "Generate a Table component, include 3 columns: name, age, address"
    ],
    "model": "gpt-4o",
    "codeRendererUrl": "http://localhost:3005",
    "rules": [
      {
        "type": "styles",
        "description": "Define the rules for generating styles",
        "prompt": "Use styled-components for styles"
      },
      {
        "type": "file-structure",
        "description": "Define the file structure for the project",
        "prompt": "Output component code in XML format as follows:\n<ComponentArtifact name=\"ComponentName\">\n  <ComponentFile fileName=\"App.tsx\" isEntryFile=\"true\">\n    import { ComponentName } from './ComponentName';\n    \n    const mockProps = {\n      // Define mock data here\n    };\n    \n    export default function App() {\n      return <ComponentName {...mockProps} />;\n    }\n  </ComponentFile>\n  \n  <ComponentFile fileName=\"[ComponentName].tsx\">\n    // Main component implementation\n    // Split into multiple files if exceeds 500 lines\n    export const ComponentName = () => {\n      // Component implementation\n    }\n  </ComponentFile>\n\n  <ComponentFile fileName=\"helpers.ts\">\n    // Helper functions (optional)\n  </ComponentFile>\n\n  <ComponentFile fileName=\"interface.ts\">\n    // Type definitions for component props\n    // All API-interacting data must be defined as props:\n    // - initialData for component initialization\n    // - onChange, onSave, onDelete etc. for data modifications\n  </ComponentFile>\n  <ComponentFile fileName=\"styles.ts\">\n    // Styles for the component, must be written using styled-components only\n  </ComponentFile>\n</ComponentArtifact>"
      },
      {
        "type": "attention-rules",
        "description": "Attention rules for the code generator",
        "prompt": "Only use the following npm packages in the generated code: react, react-dom, @private-basic-components, styled-components. Do not import or use any other packages. When importing from '@private-basic-components', ONLY use named imports like: import { Button } from '@private-basic-components'; - DO NOT use default imports, namespace imports, or side effect imports for these packages."
      },
      {
        "type": "private-components",
        "description": "Define which private components to use",
        "docs": {
          "@private-basic-components": {
            "Affix": {
              "description": "On longer web pages, it's helpful to stick component into the viewport. This is common for menus and actions.\n\nPlease note that Affix should not cover other content on the page, especially when the size of the viewport is small.\n\n> Notes for developers\n>\n> After version `5.10.0`, we rewrite Affix use FC, Some methods of obtaining `ref` and calling internal instance methods will invalid.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| offsetBottom | Offset from the bottom of the viewport (in pixels) | number | - |\n| offsetTop | Offset from the top of the viewport (in pixels) | number | 0 |\n| target | Specifies the scrollable area DOM node | () => HTMLElement | () => window |\n| onChange | Callback for when Affix state is changed | (affixed?: boolean) => void | - |\n\n**Note:** Children of `Affix` must not have the property `position: absolute`, but you can set `position: absolute` on `Affix` itself:\n\n```jsx\n<Affix style={{ position: 'absolute', top: y, left: x }}>...</Affix>\n```"
            },
            "Alert": {
              "description": "- When you need to show alert messages to users.\n- When you need a persistent static container which is closable by user actions.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| action | The action of Alert | ReactNode | - | 4.9.0 |\n| afterClose | Called when close animation is finished | () => void | - |  |\n| banner | Whether to show as banner | boolean | false |  |\n| closeIcon | Custom close icon, >=5.7.0: close button will be hidden when setting to `null` or `false` | boolean \\| ReactNode | `<CloseOutlined />` |  |\n| description | Additional content of Alert | ReactNode | - |  |\n| icon | Custom icon, effective when `showIcon` is true | ReactNode | - |  |\n| message | Content of Alert | ReactNode | - |  |\n| showIcon | Whether to show icon | boolean | false, in `banner` mode default is true |  |\n| type | Type of Alert styles, options: `success`, `info`, `warning`, `error` | string | `info`, in `banner` mode default is `warning` |  |\n| onClose | Callback when Alert is closed | (e: MouseEvent) => void | - |  |\n\n### Alert.ErrorBoundary\n\n| Property    | Description                      | Type      | Default           | Version |\n| ----------- | -------------------------------- | --------- | ----------------- | ------- |\n| description | Custom error description to show | ReactNode | {{ error stack }} |         |\n| message     | Custom error message to show     | ReactNode | {{ error }}       |         |"
            },
            "Anchor": {
              "description": "For displaying anchor hyperlinks on page and jumping between them.\n\n> Notes for developers\n>\n> After version `4.24.0`, we rewrite Anchor use FC, Some methods of obtaining `ref` and calling internal instance methods will invalid.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Anchor Props\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| affix | Fixed mode of Anchor | boolean | true |  |\n| bounds | Bounding distance of anchor area | number | 5 |  |\n| getContainer | Scrolling container | () => HTMLElement | () => window |  |\n| getCurrentAnchor | Customize the anchor highlight | (activeLink: string) => string | - |  |\n| offsetTop | Pixels to offset from top when calculating position of scroll | number | 0 |  |\n| showInkInFixed | Whether show ink-square when `affix={false}` | boolean | false |  |\n| targetOffset | Anchor scroll offset, default as `offsetTop`, [example](#components-anchor-demo-targetoffset) | number | - |  |\n| onChange | Listening for anchor link change | (currentActiveLink: string) => void |  |  |\n| onClick | Set the handler to handle `click` event | (e: MouseEvent, link: object) => void | - |  |\n| items | Data configuration option content, support nesting through children | { key, href, title, target, children }\\[] [see](#anchoritem) | - | 5.1.0 |\n| direction | Set Anchor direction | `vertical` \\| `horizontal` | `vertical` | 5.2.0 |\n| replace | Replace items' href in browser history instead of pushing it | boolean | false | 5.7.0 |\n\n### AnchorItem\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| key | The unique identifier of the Anchor Link | string \\| number | - |  |\n| href | The target of hyperlink | string |  |  |\n| target | Specifies where to display the linked URL | string |  |  |\n| title | The content of hyperlink | ReactNode |  |  |\n| children | Nested Anchor Link, `Attention: This attribute does not support horizontal orientation` | [AnchorItem](#anchoritem)\\[] | - |  |\n| replace | Replace item href in browser history instead of pushing it | boolean | false | 5.7.0 |\n\n### Link Props\n\nWe recommend using the items form instead.\n\n| Property | Description                               | Type      | Default | Version |\n| -------- | ----------------------------------------- | --------- | ------- | ------- |\n| href     | The target of hyperlink                   | string    |         |         |\n| target   | Specifies where to display the linked URL | string    |         |         |\n| title    | The content of hyperlink                  | ReactNode |         |         |"
            },
            "App": {
              "description": "- Provide reset styles based on `.ant-app` element.\n- You could use static methods of `message/notification/Modal` form `useApp` without writing `contextHolder` manually.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### App\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| message | Global config for Message | [MessageConfig](/components/message/#messageconfig) | - | 5.3.0 |\n| notification | Global config for Notification | [NotificationConfig](/components/notification/#notificationconfig) | - | 5.3.0 |"
            },
            "AutoComplete": {
              "description": "- When you need an input box instead of a selector.\n- When you need input suggestions or helping text.\n\nThe differences with Select are:\n\n- AutoComplete is an input box with text hints, and users can type freely. The keyword is aiding **input**.\n- Select is selecting among given choices. The keyword is **select**.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Show clear button | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: Support Object type |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| backfill | If backfill selected item the input when using keyboard | boolean | false |  |\n| bordered | Whether has border style | boolean | true |  |\n| children (for customize input element) | Customize input element | HTMLInputElement \\| HTMLTextAreaElement \\| React.ReactElement&lt;InputProps> | &lt;Input /> |  |\n| children (for dataSource) | Data source to auto complete | React.ReactElement&lt;OptionProps> \\| Array&lt;React.ReactElement&lt;OptionProps>> | - |  |\n| defaultActiveFirstOption | Whether active first option by default | boolean | true |  |\n| defaultOpen | Initial open state of dropdown | boolean | - |  |\n| defaultValue | Initial selected option | string | - |  |\n| disabled | Whether disabled select | boolean | false |  |\n| popupClassName | The className of dropdown menu | string | - | 4.23.0 |\n| dropdownMatchSelectWidth | Determine whether the dropdown menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll | boolean \\| number | true |  |\n| filterOption | If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns true, the option will be included in the filtered set; Otherwise, it will be excluded | boolean \\| function(inputValue, option) | true |  |\n| notFoundContent | Specify content to show when no result matches | string | `Not Found` |  |\n| open | Controlled open state of dropdown | boolean | - |  |\n| options | Select options. Will get better perf than jsx definition | { label, value }\\[] | - |  |\n| placeholder | The placeholder of input | string | - |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| value | Selected option | string | - |  |\n| onBlur | Called when leaving the component | function() | - |  |\n| onChange | Called when selecting an option or changing an input value | function(value) | - |  |\n| onDropdownVisibleChange | Call when dropdown open | function(open) | - |  |\n| onFocus | Called when entering the component | function() | - |  |\n| onSearch | Called when searching items | function(value) | - |  |\n| onSelect | Called when a option is selected. param is option's value and option instance | function(value, option) | - |  |\n| onClear | Called when clear | function | - | 4.6.0 |"
            },
            "Badge": {
              "description": "Badge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Badge\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| color | Customize Badge dot color | string | - |  |\n| count | Number to show in badge | ReactNode | - |  |\n| classNames | Semantic DOM class | Record<SemanticDOM, string> | - | 5.7.0 |\n| dot | Whether to display a red dot instead of `count` | boolean | false |  |\n| offset | Set offset of the badge dot | \\[number, number] | - |  |\n| overflowCount | Max count to show | number | 99 |  |\n| showZero | Whether to show badge when `count` is zero | boolean | false |  |\n| size | If `count` is set, `size` sets the size of badge | `default` \\| `small` | - | - |\n| status | Set Badge as a status dot | `success` \\| `processing` \\| `default` \\| `error` \\| `warning` | - |  |\n| styles | Semantic DOM style | Record<SemanticDOM, CSSProperties> | - | 5.7.0 |\n| text | If `status` is set, `text` sets the display text of the status `dot` | ReactNode | - |  |\n| title | Text to show when hovering over the badge | string | - |  |\n\n### Badge.Ribbon\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| color | Customize Ribbon color | string | - |  |\n| placement | The placement of the Ribbon, `start` and `end` follow text direction (RTL or LTR) | `start` \\| `end` | `end` |  |\n| text | Content inside the Ribbon | ReactNode | - |  |\n\n### `styles` and `classNames` attribute\n\n| Property  | Description         | Version |\n| --------- | ------------------- | ------- |\n| root      | set `root` element  | 5.7.0   |\n| indicator | set `badge` element | 5.7.0   |"
            },
            "Breadcrumb": {
              "description": "- When the system has more than two layers in a hierarchy.\n- When you need to inform the user of where they are.\n- When the user may need to navigate back to a higher level.\n\n```jsx\n// works when >=5.3.0, recommended ✅\nreturn <Breadcrumb items={[{ title: 'sample' }]} />;\n\n// works when <5.3.0, deprecated when >=5.3.0 🙅🏻‍♀️\nreturn (\n  <Breadcrumb>\n    <Breadcrumb.Item>sample</Breadcrumb.Item>\n  </Breadcrumb>\n);\n\n// or\n\nreturn <Breadcrumb routes={[{ breadcrumbName: 'sample' }]} />;\n```",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Breadcrumb\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| itemRender | Custom item renderer | (route, params, routes, paths) => ReactNode | - |  |\n| params | Routing parameters | object | - |  |\n| items | The routing stack information of router | [items\\[\\]](#ItemType) | - | 5.3.0 |\n| separator | Custom separator | ReactNode | `/` |  |\n\n### ItemType\n\n> type ItemType = [RouteItemType](#RouteItemType) | [SeparatorType](#SeparatorType)\n\n### RouteItemType\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| className | The additional css class | string | - |  |\n| dropdownProps | The dropdown props | [Dropdown](/components/dropdown) | - |  |\n| href | Target of hyperlink. Can not work with `path` | string | - |  |\n| path | Connected path. Each path will connect with prev one. Can not work with `href` | string | - |  |\n| menu | The menu props | [MenuProps](/components/menu/#api) | - | 4.24.0 |\n| onClick | Set the handler to handle click event | (e:MouseEvent) => void | - |  |\n| title | item name | ReactNode | - |  |\n\n### SeparatorType\n\n```ts\nconst item = {\n  type: 'separator', // Must have\n  separator: '/',\n};\n```\n\n| Property  | Description       | Type        | Default | Version |\n| --------- | ----------------- | ----------- | ------- | ------- |\n| type      | Mark as separator | `separator` |         | 5.3.0   |\n| separator | Custom separator  | ReactNode   | `/`     | 5.3.0   |\n\n### Use with browserHistory\n\nThe link of Breadcrumb item targets `#` by default, you can use `itemRender` to make a `browserHistory` Link.\n\n```jsx\nimport { Link } from 'react-router';\n\nconst items = [\n  {\n    path: 'index',\n    title: 'home',\n  },\n  {\n    path: 'first',\n    title: 'first',\n    children: [\n      {\n        path: '/general',\n        title: 'General',\n      },\n      {\n        path: '/layout',\n        title: 'Layout',\n      },\n      {\n        path: '/navigation',\n        title: 'Navigation',\n      },\n    ],\n  },\n  {\n    path: 'second',\n    title: 'second',\n  },\n];\nfunction itemRender(route, params, items, paths) {\n  const last = items.indexOf(item) === items.length - 1;\n  return last ? <span>{item.title}</span> : <Link to={paths.join('/')}>{item.title}</Link>;\n}\n\nreturn <Breadcrumb itemRender={itemRender} items={items} />;\n```"
            },
            "Button": {
              "description": "A button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.\n\nIn @private-basic-components we provide 5 types of button.\n\n- Primary button: indicate the main action, one primary button at most in one section.\n- Default button: indicate a series of actions without priority.\n- Dashed button: commonly used for adding more actions.\n- Text button: used for the most secondary action.\n- Link button: used for external links.\n\nAnd 4 other properties additionally.\n\n- `danger`: used for actions of risk, like deletion or authorization.\n- `ghost`: used in situations with complex background, home pages usually.\n- `disabled`: when actions are not available.\n- `loading`: add loading spinner in button, avoiding multiple submits too.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\nDifferent button styles can be generated by setting Button properties. The recommended order is: `type` -> `shape` -> `size` -> `loading` -> `disabled`.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| block | Option to fit button width to its parent width | boolean | false |  |\n| classNames | Semantic DOM class | Record<SemanticDOM, string> | - | 5.4.0 |\n| danger | Set the danger status of button | boolean | false |  |\n| disabled | Disabled state of button | boolean | false |  |\n| ghost | Make background transparent and invert text and border colors | boolean | false |  |\n| href | Redirect url of link button | string | - |  |\n| htmlType | Set the original html `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button` |  |\n| icon | Set the icon component of button | ReactNode | - |  |\n| loading | Set the loading status of button | boolean \\| { delay: number } | false |  |\n| shape | Can be set button shape | `default` \\| `circle` \\| `round` | `default` |  |\n| size | Set the size of button | `large` \\| `middle` \\| `small` | `middle` |  |\n| styles | Semantic DOM style | Record<SemanticDOM, CSSProperties> | - | 5.4.0 |\n| target | Same as target attribute of a, works when href is specified | string | - |  |\n| type | Set button type | `primary` \\| `dashed` \\| `link` \\| `text` \\| `default` | `default` |  |\n| onClick | Set the handler to handle `click` event | (event: MouseEvent) => void | - |  |\n\nIt accepts all props which native buttons support.\n\n### `styles` and `classNames` attribute\n\n| Property | Description       | Version |\n| -------- | ----------------- | ------- |\n| icon     | set `icon`element | 5.5.0   |"
            },
            "Calendar": {
              "description": "When data is in the form of dates, such as schedules, timetables, prices calendar, lunar calendar. This component also supports Year/Month switch.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n**Note:** Part of the Calendar's locale is read from `value`. So, please set the locale of `dayjs` correctly.\n\n```jsx\n// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\n// import dayjs from 'dayjs';\n// import 'dayjs/locale/zh-cn';\n// dayjs.locale('zh-cn');\n\n<Calendar\n  dateCellRender={dateCellRender}\n  monthCellRender={monthCellRender}\n  onPanelChange={onPanelChange}\n  onSelect={onSelect}\n/>\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| dateCellRender | Customize the display of the date cell, the returned content will be appended to the cell | function(date: Dayjs): ReactNode | - |  |\n| dateFullCellRender | Customize the display of the date cell, the returned content will override the cell | function(date: Dayjs): ReactNode | - |  |\n| defaultValue | The date selected by default | [dayjs](https://day.js.org/) | - |  |\n| disabledDate | Function that specifies the dates that cannot be selected, `currentDate` is same dayjs object as `value` prop which you shouldn't mutate it](https://github.com/@private-basic-components/@private-basic-components/issues/30987) | (currentDate: Dayjs) => boolean | - |  |\n| fullscreen | Whether to display in full-screen | boolean | true |  |\n| headerRender | Render custom header in panel | function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()}) | - |  |\n| locale | The calendar's locale | object | [(default)](https://github.com/@private-basic-components/@private-basic-components/blob/master/components/date-picker/locale/example.json) |  |\n| mode | The display mode of the calendar | `month` \\| `year` | `month` |  |\n| monthCellRender | Customize the display of the month cell, the returned content will be appended to the cell | function(date: Dayjs): ReactNode | - |  |\n| monthFullCellRender | Customize the display of the month cell, the returned content will override the cell | function(date: Dayjs): ReactNode | - |  |\n| validRange | To set valid range | \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)] | - |  |\n| value | The current selected date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback for when date changes | function(date: Dayjs) | - |  |\n| onPanelChange | Callback for when panel changes | function(date: Dayjs, mode: string) | - |  |\n| onSelect | Callback for when a date is selected, include source info | function(date: Dayjs, info: { source: 'year' \\| 'month' \\| 'date' \\| 'customize' }) | - | `info`: 5.6.0 |"
            },
            "Card": {
              "description": "A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n```jsx\n<Card title=\"Card title\">Card content</Card>\n```\n\n### Card\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| actions | The action list, shows at the bottom of the Card | Array&lt;ReactNode> | - |  |\n| activeTabKey | Current TabPane's key | string | - |  |\n| bodyStyle | Inline style to apply to the card content | CSSProperties | - |  |\n| bordered | Toggles rendering of the border around the card | boolean | true |  |\n| cover | Card cover | ReactNode | - |  |\n| defaultActiveTabKey | Initial active TabPane's key, if `activeTabKey` is not set | string | - |  |\n| extra | Content to render in the top-right corner of the card | ReactNode | - |  |\n| headStyle | Inline style to apply to the card head | CSSProperties | - |  |\n| hoverable | Lift up when hovering card | boolean | false |  |\n| loading | Shows a loading indicator while the contents of the card are being fetched | boolean | false |  |\n| size | Size of card | `default` \\| `small` | `default` |  |\n| tabBarExtraContent | Extra content in tab bar | ReactNode | - |  |\n| tabList | List of TabPane's head | [TabItemType](/components/tabs#tabitemtype)[] | - |  |\n| tabProps | [Tabs](/components/tabs/#tabs) | - | - |  |\n| title | Card title | ReactNode | - |  |\n| type | Card style type, can be set to `inner` or not set | string | - |  |\n| onTabChange | Callback when tab is switched | (key) => void | - |  |\n\n### Card.Grid\n\n| Property  | Description                     | Type          | Default | Version |\n| --------- | ------------------------------- | ------------- | ------- | ------- |\n| className | The className of container      | string        | -       |         |\n| hoverable | Lift up when hovering card grid | boolean       | true    |         |\n| style     | The style object of container   | CSSProperties | -       |         |\n\n### Card.Meta\n\n| Property    | Description                   | Type          | Default | Version |\n| ----------- | ----------------------------- | ------------- | ------- | ------- |\n| avatar      | Avatar or icon                | ReactNode     | -       |         |\n| className   | The className of container    | string        | -       |         |\n| description | Description content           | ReactNode     | -       |         |\n| style       | The style object of container | CSSProperties | -       |         |\n| title       | Title content                 | ReactNode     | -       |         |"
            },
            "Carousel": {
              "description": "- When there is a group of content on the same level.\n- When there is insufficient content space, it can be used to save space in the form of a revolving door.\n- Commonly used for a group of pictures/cards.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoplay | Whether to scroll automatically | boolean | false |  |\n| dotPosition | The position of the dots, which can be one of `top` `bottom` `left` `right` | string | `bottom` |  |\n| dots | Whether to show the dots at the bottom of the gallery, `object` for `dotsClass` and any others | boolean \\| { className?: string } | true |  |\n| waitForAnimate | Whether to wait for the animation when switching | boolean | false |  |\n| easing | Transition interpolation function name | string | `linear` |  |\n| effect | Transition effect | `scrollx` \\| `fade` | `scrollx` |  |\n| afterChange | Callback function called after the current index changes | (current: number) => void | - |  |\n| beforeChange | Callback function called before the current index changes | (current: number, next: number) => void | - |  |"
            },
            "Cascader": {
              "description": "- When you need to select from a set of associated data set. Such as province/city/district, company level, things classification.\n- When selecting from a large data set, with multi-stage classification separated for easy selection.\n- Chooses cascade items in one float layer for better user experience.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n```jsx\n<Cascader options={options} onChange={onChange} />\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Show clear button | boolean \\| { clearIcon?: ReactNode } | true | 5.8.0: Support object type |\n| autoClearSearchValue | Whether the current search will be cleared on selecting an item. Only applies when `multiple` is `true` | boolean | true | 5.9.0 |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| bordered | Whether has border style | boolean | true |  |\n| changeOnSelect | (Work on single select) Change value on each selection if set to true, see above demo for details | boolean | false |  |\n| className | The additional css class | string | - |  |\n| defaultValue | Initial selected value | string\\[] \\| number\\[] | \\[] |  |\n| disabled | Whether disabled select | boolean | false |  |\n| displayRender | The render function of displaying selected options | (label, selectedOptions) => ReactNode | label => label.join(`/`) | `multiple`: 4.18.0 |\n| tagRender | Custom render function for tags in `multiple` mode | (label: string, onClose: function, value: string) => ReactNode | - |  |\n| popupClassName | The additional className of popup overlay | string | - | 4.23.0 |\n| dropdownRender | Customize dropdown content | (menus: ReactNode) => ReactNode | - | 4.4.0 |\n| expandIcon | Customize the current item expand icon | ReactNode | - | 4.4.0 |\n| expandTrigger | expand current item when click or hover, one of `click` `hover` | string | `click` |  |\n| fieldNames | Custom field name for label and value and children | object | { label: `label`, value: `value`, children: `children` } |  |\n| getPopupContainer | Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body |  |\n| loadData | To load option lazily, and it cannot work with `showSearch` | (selectedOptions) => void | - |  |\n| maxTagCount | Max tag count to show. `responsive` will cost render performance | number \\| `responsive` | - | 4.17.0 |\n| maxTagPlaceholder | Placeholder for not showing tags | ReactNode \\| function(omittedValues) | - | 4.17.0 |\n| maxTagTextLength | Max tag text length to show | number | - | 4.17.0 |\n| notFoundContent | Specify content to show when no result matches | string | `Not Found` |  |\n| open | Set visible of cascader popup | boolean | - | 4.17.0 |\n| options | The data options of cascade | [Option](#option)\\[] | - |  |\n| placeholder | The input placeholder | string | `Please select` |  |\n| placement | Use preset popup align config from builtinPlacements | `bottomLeft` `bottomRight` `topLeft` `topRight` | `bottomLeft` | 4.17.0 |\n| showSearch | Whether show search input in single mode | boolean \\| [Object](#showsearch) | false |  |\n| size | The input size | `large` \\| `middle` \\| `small` | - |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| style | The additional style | CSSProperties | - |  |\n| suffixIcon | The custom suffix icon | ReactNode | - |  |\n| value | The selected value | string\\[] \\| number\\[] | - |  |\n| onChange | Callback when finishing cascader select | (value, selectedOptions) => void | - |  |\n| onDropdownVisibleChange | Callback when popup shown or hidden | (value) => void | - | 4.17.0 |\n| multiple | Support multiple or not | boolean | - | 4.17.0 |\n| removeIcon | The custom remove icon | ReactNode | - |  |\n| showCheckedStrategy | The way show selected item in box. ** `SHOW_CHILD`: ** just show child treeNode. **`Cascader.SHOW_PARENT`:** just show parent treeNode (when all child treeNode under the parent treeNode are checked) | `Cascader.SHOW_PARENT` \\| `Cascader.SHOW_CHILD` | `Cascader.SHOW_PARENT` | 4.20.0 |\n| searchValue | Set search value, Need work with `showSearch` | string | - | 4.17.0 |\n| onSearch | The callback function triggered when input changed | (search: string) => void | - | 4.17.0 |\n| dropdownMenuColumnStyle | The style of the drop-down menu column | CSSProperties | - |  |\n| loadingIcon | The appearance of lazy loading (now is useless) | ReactNode | - |  |\n\n### showSearch\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| filter | The function will receive two arguments, inputValue and option, if the function returns true, the option will be included in the filtered set; Otherwise, it will be excluded | function(inputValue, path): boolean | - |  |\n| limit | Set the count of filtered items | number \\| false | 50 |  |\n| matchInputWidth | Whether the width of list matches input, ([how it looks](https://github.com/@private-basic-components/@private-basic-components/issues/25779)) | boolean | true |  |\n| render | Used to render filtered options | function(inputValue, path): ReactNode | - |  |\n| sort | Used to sort filtered options | function(a, b, inputValue) | - |  |\n\n### Option\n\n```typescript\ninterface Option {\n  value: string | number;\n  label?: React.ReactNode;\n  disabled?: boolean;\n  children?: Option[];\n  // Determines if this is a leaf node(effective when `loadData` is specified).\n  // `false` will force trade TreeNode as a parent node.\n  // Show expand icon even if the current node has no children.\n  isLeaf?: boolean;\n}\n```"
            },
            "Checkbox": {
              "description": "- Used for selecting multiple values from several options.\n- If you use only one checkbox, it is the same as using Switch to toggle between two states. The difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n#### Checkbox\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| checked | Specifies whether the checkbox is selected | boolean | false |  |\n| defaultChecked | Specifies the initial state: whether or not the checkbox is selected | boolean | false |  |\n| disabled | If disable checkbox | boolean | false |  |\n| indeterminate | The indeterminate checked state of checkbox | boolean | false |  |\n| onChange | The callback function that is triggered when the state changes | (e: CheckboxChangeEvent) => void | - |  |\n\n#### Checkbox Group\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | Default selected value | (string \\| number)\\[] | \\[] |  |\n| disabled | If disable all checkboxes | boolean | false |  |\n| name | The `name` property of all `input[type=\"checkbox\"]` children | string | - |  |\n| options | Specifies options | string\\[] \\| number\\[] \\| Option\\[] | \\[] |  |\n| value | Used for setting the currently selected value | (string \\| number \\| boolean)\\[] | \\[] |  |\n| onChange | The callback function that is triggered when the state changes | (checkedValue: CheckboxValueType[]) => void | - |  |\n\n##### Option\n\n```typescript\ninterface Option {\n  label: string;\n  value: string;\n  disabled?: boolean;\n}\n```\n\n### Methods\n\n#### Checkbox\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |"
            },
            "Collapse": {
              "description": "- Can be used to group or hide complex regions to keep the page clean.\n- `Accordion` is a special kind of `Collapse`, which allows only one panel to be expanded at a time.\n\n```tsx | pure\n// works when >= 5.6.0, recommended ✅\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nconst items: CollapseProps['items'] = [\n  {\n    key: '1',\n    label: 'This is panel header 1',\n    children: <p>{text}</p>,\n  },\n  {\n    key: '2',\n    label: 'This is panel header 2',\n    children: <p>{text}</p>,\n  },\n  {\n    key: '3',\n    label: 'This is panel header 3',\n    children: <p>{text}</p>,\n  },\n];\n\n<Collapse items={items} defaultActiveKey={['1']} />;\n\n// works when <5.6.0 , deprecated when >=5.6.0  🙅🏻‍♀️\n\n<Collapse defaultActiveKey={['1']} onChange={onChange}>\n  <Panel header=\"This is panel header 1\" key=\"1\">\n    <p>{text}</p>\n  </Panel>\n  <Panel header=\"This is panel header 2\" key=\"2\">\n    <p>{text}</p>\n  </Panel>\n  <Panel header=\"This is panel header 3\" key=\"3\">\n    <p>{text}</p>\n  </Panel>\n</Collapse>;\n```",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Collapse\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| accordion | If true, Collapse renders as Accordion | boolean | false |  |\n| activeKey | Key of the active panel | string\\[] \\| string <br/> number\\[] \\| number | No default value. In `accordion` mode, it's the key of the first panel |  |\n| bordered | Toggles rendering of the border around the collapse block | boolean | true |  |\n| collapsible | Specify whether the panels of children be collapsible or the trigger area of collapsible | `header` \\| `icon` \\| `disabled` | - | 4.9.0 |\n| defaultActiveKey | Key of the initial active panel | string\\[] \\| string <br/> number\\[] \\| number | - |  |\n| destroyInactivePanel | Destroy Inactive Panel | boolean | false |  |\n| expandIcon | Allow to customize collapse icon | (panelProps) => ReactNode | - |  |\n| expandIconPosition | Set expand icon position | `start` \\| `end` | - | 4.21.0 |\n| ghost | Make the collapse borderless and its background transparent | boolean | false | 4.4.0 |\n| size | Set the size of collapse | `large` \\| `middle` \\| `small` | `middle` | 5.2.0 |\n| onChange | Callback function executed when active panel is changed | function | - |  |\n| items | collapse items content | [ItemType](https://github.com/react-component/collapse/blob/27250ca5415faab16db412b9bff2c131bb4f32fc/src/interface.ts#L6) | - | 5.6.0 |\n\n### Collapse.Panel\n\n<Alert message=\"&gt;= 5.6.0 configure the panel by `items`.\"></Alert>\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| collapsible | Specify whether the panel be collapsible or the trigger area of collapsible | `header` \\| `icon` \\| `disabled` | - | 4.9.0 (icon: 4.24.0) |\n| extra | The extra element in the corner | ReactNode | - |  |\n| forceRender | Forced render of content on panel, instead of lazy rendering after clicking on header | boolean | false |  |\n| header | Title of the panel | ReactNode | - |  |\n| key | Unique key identifying the panel from among its siblings | string \\| number | - |  |\n| showArrow | If false, panel will not show arrow icon. If false, collapsible can't be set as icon | boolean | true |  |"
            },
            "ColorPicker": {
              "description": "Used when the user needs to customize the color selection.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n> This component is available since `@private-basic-components@5.5.0`.\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default | Version |\n| :-- | :-- | :-- | :-- | :-- |\n| allowClear | \tAllow clearing color selected | boolean | false | |\n| arrow | Configuration for popup arrow | `boolean \\| { pointAtCenter: boolean }` | true | |\n| children | Trigger of ColorPicker | React.ReactNode | - | |\n| defaultValue | Default value of color | string \\| `Color` | - | |\n| defaultFormat | Default format of color | `rgb` \\| `hex` \\| `hsb` | - | 5.9.0 |\n| disabled | Disable ColorPicker | boolean | - | |\n| disabledAlpha | Disable Alpha | boolean | - | 5.8.0 |\n| destroyTooltipOnHide | Whether destroy popover when hidden | `boolean` | false | 5.7.0 |\n| format | Format of color | `rgb` \\| `hex` \\| `hsb` | `hex` | |\n| open | Whether to show popup | boolean | - | |\n| presets | \tPreset colors | `{ label: ReactNode, colors: Array<string \\| Color> }[]` | - | |\n| placement | Placement of popup | `top` \\| `topLeft` \\| `topRight` \\| `bottom` \\| `bottomLeft` \\| `bottomRight` | `bottomLeft` | |\n| panelRender | Custom Render Panel | `(panel: React.ReactNode, extra: { components: { Picker: FC; Presets: FC } }) => React.ReactNode` | - | 5.7.0 |\n| showText | Show color text | boolean \\| `(color: Color) => React.ReactNode` | - | 5.7.0 |\n| size | Setting the trigger size | `large` \\| `middle` \\| `small` | `middle` | 5.7.0 |\n| trigger | ColorPicker trigger mode | `hover` \\| `click` | `click` | |\n| value | Value of color | string \\| `Color` | - | |\n| onChange | Callback when `value` is changed | `(value: Color, hex: string) => void` | - | |\n| onChangeComplete | Called when color pick ends   | `(value: Color) => void` | - | 5.7.0 |\n| onFormatChange | Callback when `format` is changed | `(format: 'hex' \\| 'rgb' \\| 'hsb') => void` | - | |\n| onOpenChange | Callback when `open` is changed | `(open: boolean) => void` | - | |\n| onClear | Called when clear | `() => void` | - | 5.6.0 |\n\n### Color\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default |\n| :-- | :-- | :-- | :-- |\n| toHex | Convert to `hex` format characters, the return type like: `1677ff` | `() => string` | - |\n| toHexString | Convert to `hex` format color string, the return type like: `#1677ff` | `() => string` | - |\n| toHsb | Convert to `hsb` object  | `() => ({ h: number, s: number, b: number, a number })` | - |\n| toHsbString | Convert to `hsb` format color string, the return type like: `hsb(215, 91%, 100%)` | `() => string` | - |\n| toRgb | Convert to `rgb` object  | `() => ({ r: number, g: number, b: number, a number })` | - |\n| toRgbString | Convert to `rgb` format color string, the return type like: `rgb(22, 119, 255)` | `() => string` | - |"
            },
            "DatePicker": {
              "description": "By clicking the input box, you can select a date from a popup calendar.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\nThere are five kinds of picker:\n\n- DatePicker\n- DatePicker\\[picker=\"month\"]\n- DatePicker\\[picker=\"week\"]\n- DatePicker\\[picker=\"year\"]\n- DatePicker\\[picker=\"quarter\"] (Added in 4.1.0)\n- RangePicker\n\n### Localization\n\nThe default locale is en-US, if you need to use other languages, recommend to use internationalized components provided by us at the entrance. Look at: [ConfigProvider](https://@private-basic-components/components/config-provider/).\n\nIf there are special needs (only modifying single component language), Please use the property: local. Example: [default](https://github.com/@private-basic-components/@private-basic-components/blob/master/components/date-picker/locale/example.json).\n\n```jsx\nimport locale from '@private-basic-components/es/date-picker/locale/zh_CN';\n\nimport 'dayjs/locale/zh-cn';\n\n<DatePicker locale={locale} />;\n```\n\n```jsx\n// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\nimport locale from '@private-basic-components/locale/zh_CN';\nimport dayjs from 'dayjs';\n\nimport 'dayjs/locale/zh-cn';\n\n<ConfigProvider locale={locale}>\n  <DatePicker defaultValue={dayjs('2015-01-01', 'YYYY-MM-DD')} />\n</ConfigProvider>;\n```\n\n### Common API\n\nThe following APIs are shared by DatePicker, RangePicker.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Customize clear button | boolean \\| { clearIcon?: ReactNode } | true | 5.8.0: Support object type |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| bordered | Whether has border style | boolean | true |  |\n| className | The picker className | string | - |  |\n| dateRender | Custom rendering function for date cells, >= 5.4.0 use `cellRender` instead. | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| changeOnBlur | Trigger `change` when blur. e.g. datetime picker no need click confirm button | boolean | false | 5.5.0 |\n| cellRender | Custom rendering function for picker cells | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| disabled | Determine whether the DatePicker is disabled | boolean | false |  |\n| disabledDate | Specify the date that cannot be selected | (currentDate: dayjs) => boolean | - |  |\n| format | To set the date format, support multi-format matching when it is an array, display the first one shall prevail. refer to [dayjs#format](https://day.js.org/docs/en/display/format). for example: [Custom Format](#components-date-picker-demo-format) | [formatType](#formattype) | [rc-picker](https://github.com/react-component/picker/blob/f512f18ed59d6791280d1c3d7d37abbb9867eb0b/src/utils/uiUtil.ts#L155-L177) |  |\n| popupClassName | To customize the className of the popup calendar | string | - | 4.23.0 |\n| getPopupContainer | To set the container of the floating layer, while the default is to create a `div` element in `body` | function(trigger) | - |  |\n| inputReadOnly | Set the `readonly` attribute of the input tag (avoids virtual keyboard on touch devices) | boolean | false |  |\n| locale | Localization configuration | object | [default](https://github.com/@private-basic-components/@private-basic-components/blob/master/components/date-picker/locale/example.json) |  |\n| mode | The picker panel mode（ [Cannot select year or month anymore?](/docs/react/faq#when-set-mode-to-datepickerrangepicker-cannot-select-year-or-month-anymore) ) | `time` \\| `date` \\| `month` \\| `year` \\| `decade` | - |  |\n| nextIcon | The custom next icon | ReactNode | - | 4.17.0 |\n| open | The open state of picker | boolean | - |  |\n| panelRender | Customize panel render | (panelNode) => ReactNode | - | 4.5.0 |\n| picker | Set picker type | `date` \\| `week` \\| `month` \\| `quarter` \\| `year` | `date` | `quarter`: 4.1.0 |\n| placeholder | The placeholder of date input | string \\| \\[string,string] | - |  |\n| placement | The position where the selection box pops up | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| popupStyle | To customize the style of the popup calendar | CSSProperties | {} |  |\n| presets | The preset ranges for quick selection, Since `5.8.0`, preset value supports callback function. | { label: React.ReactNode, value: Dayjs \\| (() => Dayjs) }\\[] | - |  |\n| prevIcon | The custom prev icon | ReactNode | - | 4.17.0 |\n| size | To determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px | `large` \\| `middle` \\| `small` | - |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| style | To customize the style of the input box | CSSProperties | {} |  |\n| suffixIcon | The custom suffix icon | ReactNode | - |  |\n| superNextIcon | The custom super next icon | ReactNode | - | 4.17.0 |\n| superPrevIcon | The custom super prev icon | ReactNode | - | 4.17.0 |\n| onOpenChange | Callback function, can be executed whether the popup calendar is popped up or closed | function(open) | - |  |\n| onPanelChange | Callback when picker panel mode is changed | function(value, mode) | - |  |\n\n### Common Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n### DatePicker\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date, if start time or end time is null or undefined, the date range will be an open interval | [dayjs](https://day.js.org/) | - |  |\n| disabledTime | To specify the time that cannot be selected | function(date) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-MM-DD` |  |\n| renderExtraFooter | Render extra footer in panel | (mode) => React.ReactNode | - |  |\n| showNow | Whether to show 'Now' button on panel when `showTime` is set | boolean | - | 4.4.0 |\n| showTime | To provide an additional time selection | object \\| boolean | [TimePicker Options](/components/time-picker/#api) |  |\n| showTime.defaultValue | To set default time of selected date, [demo](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/) | dayjs() |  |\n| showToday | Whether to show `Today` button | boolean | true |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n| onOk | Callback when click ok button | function() | - |  |\n| onPanelChange | Callback function for panel changing | function(value, mode) | - |  |\n\n### DatePicker\\[picker=year]\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date | [dayjs](https://day.js.org/) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY` |  |\n| renderExtraFooter | Render extra footer in panel | () => React.ReactNode | - |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n\n### DatePicker\\[picker=quarter]\n\nAdded in `4.1.0`.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date | [dayjs](https://day.js.org/) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-\\QQ` |  |\n| renderExtraFooter | Render extra footer in panel | () => React.ReactNode | - |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n\n### DatePicker\\[picker=month]\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date | [dayjs](https://day.js.org/) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-MM` |  |\n| renderExtraFooter | Render extra footer in panel | () => React.ReactNode | - |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n\n### DatePicker\\[picker=week]\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date | [dayjs](https://day.js.org/) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-wo` |  |\n| renderExtraFooter | Render extra footer in panel | (mode) => React.ReactNode | - |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n\n### RangePicker\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowEmpty | Allow start or end input leave empty | \\[boolean, boolean] | \\[false, false] |  |\n| dateRender | Custom rendering function for date cells, >= 5.4.0 use `cellRender` instead. | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| cellRender | Custom rendering function for picker cells | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| defaultValue | To set default date | \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)] | - |  |\n| disabled | If disable start or end | \\[boolean, boolean] | - |  |\n| disabledTime | To specify the time that cannot be selected | function(date: dayjs, partial: `start` \\| `end`) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-MM-DD HH:mm:ss` |  |\n| presets | The preset ranges for quick selection, Since `5.8.0`, preset value supports callback function. | { label: React.ReactNode, value: (Dayjs \\| (() => Dayjs))\\[] }\\[] | - |  |\n| renderExtraFooter | Render extra footer in panel | () => React.ReactNode | - |  |\n| separator | Set separator between inputs | React.ReactNode | `<SwapRightOutlined />` |  |\n| showTime | To provide an additional time selection | object \\| boolean | [TimePicker Options](/components/time-picker/#api) |  |\n| showTime.defaultValue | To set default time of selected date, [demo](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/)\\[] | \\[dayjs(), dayjs()] |  |\n| value | To set date | \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)] | - |  |\n| onCalendarChange | Callback function, can be executed when the start time or the end time of the range is changing. `info` argument is added in 4.4.0 | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string], info: { range:`start`\\|`end` }) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string]) | - |  |\n\n#### formatType\n\n```typescript\nimport type { Dayjs } from 'dayjs';\n\ntype Generic = string;\ntype GenericFn = (value: Dayjs) => string;\n\nexport type FormatType = Generic | GenericFn | Array<Generic | GenericFn>;\n```"
            },
            "Descriptions": {
              "description": "Commonly displayed on the details page.\n\n```tsx | pure\n// works when >= 5.8.0, recommended ✅\n\nconst items: DescriptionsProps['items'] = [\n  {\n    key: '1',\n    label: 'UserName',\n    children: <p>Zhou Maomao</p>,\n  },\n  {\n    key: '2',\n    label: 'Telephone',\n    children: <p>1810000000</p>,\n  },\n  {\n    key: '3',\n    label: 'Live',\n    children: <p>Hangzhou, Zhejiang</p>,\n  },\n  {\n    key: '4',\n    label: 'Remark',\n    children: <p>empty</p>,\n  },\n  {\n    key: '5',\n    label: 'Address',\n    children: <p>No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China</p>,\n  },\n];\n\n<Descriptions title=\"User Info\" items={items} />;\n\n// works when <5.8.0 , deprecated when >=5.8.0 🙅🏻‍♀️\n\n<Descriptions title=\"User Info\">\n  <Descriptions.Item label=\"UserName\">Zhou Maomao</Descriptions.Item>\n  <Descriptions.Item label=\"Telephone\">1810000000</Descriptions.Item>\n  <Descriptions.Item label=\"Live\">Hangzhou, Zhejiang</Descriptions.Item>\n  <Descriptions.Item label=\"Remark\">empty</Descriptions.Item>\n  <Descriptions.Item label=\"Address\">\n    No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China\n  </Descriptions.Item>\n</Descriptions>;\n```",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Descriptions\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bordered | Whether to display the border | boolean | false |  |\n| colon | Change default props `colon` value of Descriptions.Item | boolean | true |  |\n| column | The number of `DescriptionItems` in a row,could be a number or a object like `{ xs: 8, sm: 16, md: 24}`,(Only set `bordered={true}` to take effect) | number \\| [Record<Breakpoint, number>](https://github.com/@private-basic-components/@private-basic-components/blob/84ca0d23ae52e4f0940f20b0e22eabe743f90dca/components/descriptions/index.tsx#L111C21-L111C56) | 3 |  |\n| contentStyle | Customize content style | CSSProperties | - | 4.10.0 |\n| extra | The action area of the description list, placed at the top-right | ReactNode | - | 4.5.0 |\n| items | Describe the contents of the list item | [DescriptionsItem](#descriptionitem)[] | - | 5.8.0 |\n| labelStyle | Customize label style | CSSProperties | - | 4.10.0 |\n| layout | Define description layout | `horizontal` \\| `vertical` | `horizontal` |  |\n| size | Set the size of the list. Can be set to `middle`,`small`, or not filled | `default` \\| `middle` \\| `small` | - |  |\n| title | The title of the description list, placed at the top | ReactNode | - |  |\n\n### DescriptionItem\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| contentStyle | Customize content style | CSSProperties | - | 4.9.0 |\n| label | The description of the content | ReactNode | - |  |\n| labelStyle | Customize label style | CSSProperties | - | 4.9.0 |\n| span | The number of columns included | number \\| [Screens](/components/grid#col) | 1 | `screens: 5.9.0` |\n\n> The number of span Description.Item. Span={2} takes up the width of two DescriptionItems. When both `style` and `labelStyle`(or `contentStyle`) configured, both of them will work. And next one will overwrite first when conflict."
            },
            "Divider": {
              "description": "- Divide sections of article.\n- Divide inline text and links such as the operation column of table.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| children | The wrapped title | ReactNode | - |  |\n| className | The className of container | string | - |  |\n| dashed | Whether line is dashed | boolean | false |  |\n| orientation | The position of title inside divider | `left` \\| `right` \\| `center` | `center` |  |\n| orientationMargin | The margin-left/right between the title and its closest border, while the `orientation` must be `left` or `right`, If a numeric value of type `string` is provided without a unit, it is assumed to be in pixels (px) by default. | string \\| number | - |  |\n| plain | Divider text show as plain style | boolean | true | 4.2.0 |\n| style | The style object of container | CSSProperties | - |  |\n| type | The direction type of divider | `horizontal` \\| `vertical` | `horizontal` |  |"
            },
            "Drawer": {
              "description": "A Drawer is a panel that is typically overlaid on top of a page and slides in from the side. It contains a set of information or actions. Since the user can interact with the Drawer without leaving the current page, tasks can be achieved more efficiently within the same context.\n\n- Use a Form to create or edit a set of information.\n- Processing subtasks. When subtasks are too heavy for a Popover and we still want to keep the subtasks in the context of the main task, Drawer comes very handy.\n- When the same Form is needed in multiple places.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n**🚨 Note:** v5 use `rootClassName` & `rootStyle` to config wrapper style instead of `className` & `style` in v4 to align the API with Modal.\n\n| Props | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoFocus | Whether Drawer should get focused after open | boolean | true | 4.17.0 |\n| afterOpenChange | Callback after the animation ends when switching drawers | function(open) | - |  |\n| className | Config Drawer Panel className. Use `rootClassName` if want to config top dom style | string | - |  |\n| classNames | Config Drawer build-in module's className | `header?: string; body?: string; footer?: string; mask?: string; wrapper?: string;` | - |  |\n| styles | onfig Drawer build-in module's style | `header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties; wrapper?: CSSProperties;` | - | 5.10.0 |\n| closeIcon | Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false` | boolean \\| ReactNode | &lt;CloseOutlined /> |  |\n| contentWrapperStyle | Style of the drawer wrapper of content part | CSSProperties | - |  |\n| destroyOnClose | Whether to unmount child components on closing drawer or not | boolean | false |  |\n| extra | Extra actions area at corner | ReactNode | - | 4.17.0 |\n| footer | The footer for Drawer | ReactNode | - |  |\n| forceRender | Pre-render Drawer component forcibly | boolean | false |  |\n| getContainer | mounted node and display window for Drawer | HTMLElement \\| () => HTMLElement \\| Selectors \\| false | body |  |\n| headerStyle | Style of the drawer header part | CSSProperties | - |  |\n| height | Placement is `top` or `bottom`, height of the Drawer dialog | string \\| number | 378 |  |\n| keyboard | Whether support press esc to close | boolean | true |  |\n| mask | Whether to show mask or not | boolean | true |  |\n| maskClosable | Clicking on the mask (area outside the Drawer) to close the Drawer or not | boolean | true |  |\n| placement | The placement of the Drawer | `top` \\| `right` \\| `bottom` \\| `left` | `right` |  |\n| push | Nested drawers push behavior | boolean \\| { distance: string \\| number } | { distance: 180 } | 4.5.0+ |\n| rootStyle | Style of wrapper element which **contains mask** compare to `style` | CSSProperties | - |  |\n| style | Style of Drawer panel. Use `bodyStyle` if want to config body only | CSSProperties | - |  |\n| size | preset size of drawer, default `378px` and large `736px` | 'default' \\| 'large' | 'default' | 4.17.0 |\n| title | The title for Drawer | ReactNode | - |  |\n| open | Whether the Drawer dialog is visible or not | boolean | false |  |\n| width | Width of the Drawer dialog | string \\| number | 378 |  |\n| zIndex | The `z-index` of the Drawer | number | 1000 |  |\n| onClose | Specify a callback that will be called when a user clicks mask, close button or Cancel button | function(e) | - |  |"
            },
            "Dropdown": {
              "description": "When there are more than a few options to choose from, you can wrap them in a `Dropdown`. By hovering or clicking on the trigger, a dropdown menu will appear, which allows you to choose an option and execute the relevant action.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Dropdown\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| arrow | Whether the dropdown arrow should be visible | boolean \\| { pointAtCenter: boolean } | false |  |\n| autoAdjustOverflow | Whether to adjust dropdown placement automatically when dropdown is off screen | boolean | true | 5.2.0 |\n| autoFocus | Focus element in `overlay` when opened | boolean | false | 4.21.0 |\n| disabled | Whether the dropdown menu is disabled | boolean | - |  |\n| destroyPopupOnHide | Whether destroy dropdown when hidden | boolean | false |  |\n| dropdownRender | Customize dropdown content | (menus: ReactNode) => ReactNode | - | 4.24.0 |\n| getPopupContainer | To set the container of the dropdown menu. The default is to create a div element in body, but you can reset it to the scrolling area and make a relative reposition. [Example on CodePen](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |\n| menu | The menu props | [MenuProps](/components/menu/#api) | - | 4.24.0 |\n| overlayClassName | The class name of the dropdown root element | string | - |  |\n| overlayStyle | The style of the dropdown root element | CSSProperties | - |  |\n| placement | Placement of popup menu: `bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight` | string | `bottomLeft` |  |\n| trigger | The trigger mode which executes the dropdown action. Note that hover can't be used on touchscreens | Array&lt;`click`\\|`hover`\\|`contextMenu`> | \\[`hover`] |  |\n| open | Whether the dropdown menu is currently open. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open)) | boolean | - | 4.23.0 |\n| onOpenChange | Called when the open state is changed. Not trigger when hidden by click item. Use `onVisibleChange` under 4.23.0 ([why?](/docs/react/faq#why-open)) | (open: boolean) => void | - | 4.23.0 |\n\n### Dropdown.Button\n\nSame props from Dropdown. And includes additional props:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| buttonsRender | Custom buttons inside Dropdown.Button | (buttons: ReactNode\\[]) => ReactNode\\[] | - |  |\n| loading | Set the loading status of button | boolean \\| { delay: number } | false |  |\n| danger | Set the danger status of button | boolean | - | 4.23.0 |\n| icon | Icon (appears on the right) | ReactNode | - |  |\n| size | Size of the button, the same as [Button](/components/button/#api) | string | `default` |  |\n| type | Type of the button, the same as [Button](/components/button/#api) | string | `default` |  |\n| onClick | The same as [Button](/components/button/#api): called when you click the button on the left | (event) => void | - |  |"
            },
            "Empty": {
              "description": "- When there is no data provided, display for friendly tips.\n- User tutorial to create something in fresh new situation.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n```jsx\n<Empty>\n  <Button>Create</Button>\n</Empty>\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| description | Customize description | ReactNode | - |  |\n| image | Customize image. Will treat as image url when string provided | ReactNode | `Empty.PRESENTED_IMAGE_DEFAULT` |  |\n| imageStyle | The style of image | CSSProperties | - |  |"
            },
            "Flex": {
              "description": "- Good for setting spacing between elements.\n- Suitable for setting various horizontal and vertical alignments.",
              "api": "> This component is available since `@private-basic-components@5.10.0`. The default behavior of Flex in horizontal mode is to align upward, In vertical mode, aligns the stretch, You can adjust this via properties.\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | type | Default | Version |\n| --- | --- | --- | --- | --- |\n| vertical | Is direction of the flex vertical, use `flex-direction: column` | boolean | `false` |  |\n| wrap | Set whether the element is displayed in a single line or in multiple lines | reference [flex-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) | nowrap |  |\n| justify | Sets the alignment of elements in the direction of the main axis | reference [justify-content](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content) | normal |  |\n| align | Sets the alignment of elements in the direction of the cross axis | reference [align-items](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items) | normal |  |\n| flex | flex CSS shorthand properties | reference [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) | normal |  |\n| gap | Sets the gap between grids | `small` \\| `middle` \\| `large` \\| string \\| number | - |  |\n| component | custom element type | React.ComponentType | `div` |  |"
            },
            "FloatButton": {
              "description": "- For global functionality on the site.\n- Buttons that can be seen wherever you browse.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n> This component is available since `@private-basic-components@5.0.0`.\n\n### common API\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| icon | Set the icon component of button | ReactNode | - |  |\n| description | Text and other | ReactNode | - |  |\n| tooltip | The text shown in the tooltip | ReactNode \\| () => ReactNode |  |  |\n| type | Setting button type | `default` \\| `primary` | `default` |  |\n| shape | Setting button shape | `circle` \\| `square` | `circle` |  |\n| onClick | Set the handler to handle `click` event | (event) => void | - |  |\n| href | The target of hyperlink | string | - |  |\n| target | Specifies where to display the linked URL | string | - |  |\n| badge | Attach Badge to FloatButton. `status` and other props related are not supported. | [BadgeProps](/components/badge#api) | - | 5.4.0 |\n\n### FloatButton.Group\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| shape | Setting button shape of children | `circle` \\| `square` | `circle` |  |\n| trigger | Which action can trigger menu open/close | `click` \\| `hover` | - |  |\n| open | Whether the menu is visible or not, use it with trigger | boolean | - |  |\n| onOpenChange | Callback executed when active menu is changed, use it with trigger | (open: boolean) => void | - |  |\n\n### FloatButton.BackTop\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| duration | Time to return to top（ms） | number | 450 |  |\n| target | Specifies the scrollable area dom node | () => HTMLElement | () => window |  |\n| visibilityHeight | The BackTop button will not show until the scroll height reaches this value | number | 400 |  |\n| onClick | A callback function, which can be executed when you click the button | () => void | - |  |"
            },
            "Image": {
              "description": "- When you need to display pictures.\n- Display when loading a large image or fault tolerant handling when loading fail.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Image\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| alt | Image description | string | - | 4.6.0 |\n| fallback | Load failure fault-tolerant src | string | - | 4.6.0 |\n| height | Image height | string \\| number | - | 4.6.0 |\n| placeholder | Load placeholder, use default placeholder when set `true` | ReactNode | - | 4.6.0 |\n| preview | preview config, disabled when `false` | boolean \\| [PreviewType](#previewtype) | true | 4.6.0 [PreviewType](#previewtype):4.7.0 |\n| src | Image path | string | - | 4.6.0 |\n| width | Image width | string \\| number | - | 4.6.0 |\n| onError | Load failed callback | (event: Event) => void | - | 4.12.0 |\n\nOther attributes [&lt;img>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes)\n\n### PreviewType\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| visible | Whether the preview dialog is visible or not | boolean | - | - |\n| src | Custom preview src | string | - | 4.10.0 |\n| getContainer | The mounted node for preview dialog but still display at fullScreen | string \\| HTMLElement \\| (() => HTMLElement) \\| false | - | 4.8.0 |\n| movable | whether can be moved | boolean | true | 5.8.0 |\n| mask | Thumbnail mask | ReactNode | - | 4.9.0 |\n| maskClassName | The className of the mask | string | - | 4.11.0 |\n| rootClassName | The classname of the preview root DOM | string | - | 5.4.0 |\n| scaleStep | `1 + scaleStep` is the step to increase or decrease the scale | number | 0.5 | - |\n| minScale | Min scale | number | 1 | 5.7.0 |\n| maxScale | Max scale | number | 50 | 5.7.0 |\n| closeIcon | Custom close icon | React.ReactNode | - | 5.7.0 |\n| forceRender | Force render preview dialog | boolean | - | - |\n| toolbarRender | Custom toolbar render | (originalNode: React.ReactElement, info: Omit<[ToolbarRenderInfoType](#toolbarrenderinfotype), 'current' \\| 'total'>) => React.ReactNode | - | 5.7.0 |\n| imageRender | Custom preview content | (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype) }) => React.ReactNode | - | 5.7.0 |\n| onTransform | Callback when the transform of image changed | { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) } | - | 5.7.0 |\n| onVisibleChange | Callback when `visible` changed | (visible: boolean, prevVisible: boolean) => void | - | - |"
            },
            "Input": {
              "description": "- A user input in a form field is needed.\n- A search input is required.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Input\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| addonAfter | The label text displayed after (on the right side of) the input field | ReactNode | - |  |\n| addonBefore | The label text displayed before (on the left side of) the input field | ReactNode | - |  |\n| allowClear | If allow to remove input content with clear icon | boolean \\| { clearIcon: ReactNode } | false |  |\n| bordered | Whether has border style | boolean | true | 4.5.0 |\n| classNames | Semantic DOM class | Record<[SemanticDOM](#input-1), string> | - | 5.4.0 |\n| defaultValue | The initial input content | string | - |  |\n| disabled | Whether the input is disabled | boolean | false |  |\n| id | The ID for input | string | - |  |\n| maxLength | The maximum number of characters in Input | number | - |  |\n| showCount | Whether to show character count | boolean \\| { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode } | false | 4.18.0 info.value: 4.23.0 |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| styles | Semantic DOM style | Record<[SemanticDOM](#input-1), CSSProperties> | - | 5.4.0 |\n| prefix | The prefix icon for the Input | ReactNode | - |  |\n| size | The size of the input box. Note: in the context of a form, the `middle` size is used | `large` \\| `middle` \\| `small` | - |  |\n| suffix | The suffix icon for the Input | ReactNode | - |  |\n| type | The type of input, see: [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types)( use `Input.TextArea` instead of `type=\"textarea\"`) | string | `text` |  |\n| value | The input content value | string | - |  |\n| onChange | Callback when user input | function(e) | - |  |\n| onPressEnter | The callback function that is triggered when Enter key is pressed | function(e) | - |  |\n\n> When `Input` is used in a `Form.Item` context, if the `Form.Item` has the `id` props defined then `value`, `defaultValue`, and `id` props of `Input` are automatically set.\n\nThe rest of the props of Input are exactly the same as the original [input](https://reactjs.org/docs/dom-elements.html#all-supported-html-attributes).\n\n### Input.TextArea\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Customize clear icon | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: Support object type |\n| autoSize | Height autosize feature, can be set to true \\| false or an object { minRows: 2, maxRows: 6 } | boolean \\| object | false |  |\n| bordered | Whether has border style | boolean | true | 4.5.0 |\n| classNames | Semantic DOM class | Record<[SemanticDOM](#inputtextarea-1), string> | - | 5.4.0 |\n| defaultValue | The initial input content | string | - |  |\n| maxLength | The maximum number of characters in TextArea | number | - | 4.7.0 |\n| showCount | Whether to show character count | boolean \\| { formatter: (info: { value: string, count: number, maxLength?: number }) => string } | false | 4.7.0 formatter: 4.10.0 info.value: 4.23.0 |\n| styles | Semantic DOM style | Record<[SemanticDOM](#inputtextarea-1), CSSProperties> | - | 5.4.0 |\n| value | The input content value | string | - |  |\n| onPressEnter | The callback function that is triggered when Enter key is pressed | function(e) | - |  |\n| onResize | The callback function that is triggered when resize | function({ width, height }) | - |  |\n\nThe rest of the props of `Input.TextArea` are the same as the original [textarea](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea).\n\n#### Input.Search\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| enterButton | Whether to show an enter button after input. This property conflicts with the `addonAfter` property | boolean \\| ReactNode | false |\n| loading | Search box with loading | boolean | false |\n| onSearch | The callback function triggered when you click on the search-icon, the clear-icon or press the Enter key | function(value, event, { source: \"input\" \\| \"clear\" }) | - |\n\nSupports all props of `Input`.\n\n#### Input.Password\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| iconRender | Custom toggle button | (visible) => ReactNode | (visible) => (visible ? &lt;EyeOutlined /> : &lt;EyeInvisibleOutlined />) | 4.3.0 |\n| visibilityToggle | Whether show toggle button or control password visible | boolean \\| [VisibilityToggle](#visibilitytoggle) | true |  |\n\n#### VisibilityToggle\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| visible | Whether the password is show or hide | boolean | false | 4.24.0 |\n| onVisibleChange | Callback executed when visibility of the password is changed | boolean | - | 4.24.0 |\n\n#### Input Methods\n\n| Name | Description | Parameters | Version |\n| --- | --- | --- | --- |\n| blur | Remove focus | - |  |\n| focus | Get focus | (option?: { preventScroll?: boolean, cursor?: 'start' \\| 'end' \\| 'all' }) | option - 4.10.0 |\n\n### Semantic DOM\n\n#### Input\n\n<!-- prettier-ignore -->\n| Property | Description | Version |\n| --- | --- | --- |\n| input | `input` element | 5.4.0 |\n| prefix | Wrapper of prefix | 5.4.0 |\n| suffix | Wrapper of suffix | 5.4.0 |\n| count | Text count element | 5.4.0 |\n\n#### Input.TextArea\n\n<!-- prettier-ignore -->\n| Property | Description | Version |\n| --- | --- | --- |\n| textarea | `textarea` element | 5.4.0 |\n| count | Text count element | 5.4.0 |"
            },
            "InputNumber": {
              "description": "When a numeric value needs to be provided.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| addonAfter | The label text displayed after (on the right side of) the input field | ReactNode | - |  |\n| addonBefore | The label text displayed before (on the left side of) the input field | ReactNode | - |  |\n| autoFocus | If get focus when component mounted | boolean | false | - |\n| bordered | Whether has border style | boolean | true | 4.12.0 |\n| controls | Whether to show `+-` controls, or set custom arrows icon | boolean \\| { upIcon?: React.ReactNode; downIcon?: React.ReactNode; } | - | 4.19.0 |\n| decimalSeparator | Decimal separator | string | - | - |\n| defaultValue | The initial value | number | - | - |\n| disabled | If disable the input | boolean | false | - |\n| formatter | Specifies the format of the value presented | function(value: number \\| string, info: { userTyping: boolean, input: string }): string | - | info: 4.17.0 |\n| keyboard | If enable keyboard behavior | boolean | true | 4.12.0 |\n| max | The max value | number | [Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) | - |\n| min | The min value | number | [Number.MIN_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) | - |\n| parser | Specifies the value extracted from formatter | function(string): number | - | - |\n| precision | The precision of input value. Will use `formatter` when config of `formatter` | number | - | - |\n| readOnly | If readonly the input | boolean | false | - |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| prefix | The prefix icon for the Input | ReactNode | - | 4.17.0 |\n| size | The height of input box | `large` \\| `middle` \\| `small` | - | - |\n| step | The number to which the current value is increased or decreased. It can be an integer or decimal | number \\| string | 1 | - |\n| stringMode | Set value as string to support high precision decimals. Will return string value by `onChange` | boolean | false | 4.13.0 |\n| value | The current value | number | - | - |\n| onChange | The callback triggered when the value is changed | function(value: number \\| string \\| null) | - | - |\n| onPressEnter | The callback function that is triggered when Enter key is pressed | function(e) | - | - |\n| onStep | The callback function that is triggered when click up or down buttons | (value: number, info: { offset: number, type: 'up' \\| 'down' }) => void | - | 4.7.0 |"
            },
            "List": {
              "description": "A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### List\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bordered | Toggles rendering of the border around the list | boolean | false |  |\n| dataSource | DataSource array for list | any\\[] | - |  |\n| footer | List footer renderer | ReactNode | - |  |\n| grid | The grid type of list. You can set grid to something like {gutter: 16, column: 4} | [object](#list-grid-props) | - |  |\n| header | List header renderer | ReactNode | - |  |\n| itemLayout | The layout of list | `horizontal` \\| `vertical` | `horizontal` |  |\n| loading | Shows a loading indicator while the contents of the list are being fetched | boolean \\| [SpinProps](/components/spin/#api) ([more](https://github.com/@private-basic-components/@private-basic-components/issues/8659)) | false |  |\n| loadMore | Shows a load more content | ReactNode | - |  |\n| locale | The i18n text including empty text | object | {emptyText: `No Data`} |  |\n| pagination | Pagination [config](/components/pagination/), hide it by setting it to false | boolean \\| object | false |  |\n| renderItem | Customize list item when using `dataSource` | (item) => ReactNode | - |  |\n| rowKey | Item's unique value, could be an Item's key which holds a unique value of type `React.Key` or function that receives Item and returns a `React.Key` | `keyof` T \\| (item: T) => `React.Key` | `\"key\"` |  |\n| size | Size of list | `default` \\| `large` \\| `small` | `default` |  |\n| split | Toggles rendering of the split under the list item | boolean | true |  |\n\n### pagination\n\nProperties for pagination.\n\n| Property | Description                               | Type                         | Default  |\n| -------- | ----------------------------------------- | ---------------------------- | -------- |\n| position | The specify the position of `Pagination`  | `top` \\| `bottom` \\| `both`  | `bottom` |\n| align    | The specify the alignment of `Pagination` | `start` \\| `center` \\| `end` | `end`    |\n\nMore about pagination, please check [`Pagination`](/components/pagination/).\n\n### List grid props\n\n| Property | Description              | Type   | Default | Version |\n| -------- | ------------------------ | ------ | ------- | ------- |\n| column   | The column of grid       | number | -       |         |\n| gutter   | The spacing between grid | number | 0       |         |\n| xs       | `<576px` column of grid  | number | -       |         |\n| sm       | `≥576px` column of grid  | number | -       |         |\n| md       | `≥768px` column of grid  | number | -       |         |\n| lg       | `≥992px` column of grid  | number | -       |         |\n| xl       | `≥1200px` column of grid | number | -       |         |\n| xxl      | `≥1600px` column of grid | number | -       |         |\n\n### List.Item\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| actions | The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right | Array&lt;ReactNode> | - |  |\n| extra | The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right | ReactNode | - |  |\n\n### List.Item.Meta\n\n| Property    | Description                  | Type      | Default | Version |\n| ----------- | ---------------------------- | --------- | ------- | ------- |\n| avatar      | The avatar of list item      | ReactNode | -       |         |\n| description | The description of list item | ReactNode | -       |         |\n| title       | The title of list item       | ReactNode | -       |         |"
            },
            "Mentions": {
              "description": "When you need to mention someone or something.\n\n### Usage upgrade after 5.1.0\n\n<Alert message=\"After version 5.1.0, we provide a simpler usage &lt;Mentions options={[...]} /&gt;  with better performance and potential of writing simpler code style in your applications. Meanwhile, we deprecated the old usage in browser console, we will remove it in @private-basic-components 6.0.\"></Alert>\n\n```jsx\n// works when >=5.1.0, recommended ✅\nconst options = [{ value: 'sample', label: 'sample' }];\nreturn <Mentions options={options} />;\n\n// works when <5.1.0, deprecated when >=5.1.0 🙅🏻‍♀️\nreturn (\n  <Mentions onChange={onChange}>\n    <Mentions.Option value=\"sample\">Sample</Mentions.Option>\n  </Mentions>\n);\n```",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Mention\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoFocus | Auto get focus when component mounted | boolean | false |  |\n| autoSize | Textarea height autosize feature, can be set to true \\| false or an object { minRows: 2, maxRows: 6 } | boolean \\| object | false |  |\n| defaultValue | Default value | string | - |  |\n| filterOption | Customize filter option logic | false \\| (input: string, option: OptionProps) => boolean | - |  |\n| getPopupContainer | Set the mount HTML node for suggestions | () => HTMLElement | - |  |\n| notFoundContent | Set mentions content when not match | ReactNode | `Not Found` |  |\n| placement | Set popup placement | `top` \\| `bottom` | `bottom` |  |\n| prefix | Set trigger prefix keyword | string \\| string\\[] | `@` |  |\n| split | Set split string before and after selected mention | string | ` ` |  |\n| status | Set validation status | 'error' \\| 'warning' \\| 'success' \\| 'validating' | - | 4.19.0 |\n| validateSearch | Customize trigger search logic | (text: string, props: MentionsProps) => void | - |  |\n| value | Set value of mentions | string | - |  |\n| onBlur | Trigger when mentions lose focus | () => void | - |  |\n| onChange | Trigger when value changed | (text: string) => void | - |  |\n| onFocus | Trigger when mentions get focus | () => void | - |  |\n| onResize | The callback function that is triggered when textarea resize | function({ width, height }) | - |  |\n| onSearch | Trigger when prefix hit | (text: string, prefix: string) => void | - |  |\n| onSelect | Trigger when user select the option | (option: OptionProps, prefix: string) => void | - |  |\n| options | Option Configuration | [Options](#option) | \\[] | 5.1.0 |\n\n### Mention methods\n\n| Name    | Description  |\n| ------- | ------------ |\n| blur()  | Remove focus |\n| focus() | Get focus    |\n\n### Option\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| label | Title of the option | React.ReactNode | - |\n| key | The key value of the option | string | - |\n| disabled | Optional | boolean | - |\n| className | className | string | - |\n| style | The style of the option | React.CSSProperties | - |"
            },
            "Menu": {
              "description": "Navigation is an important part of any website, as a good navigation setup allows users to move around the site quickly and efficiently. @private-basic-components offers two navigation options: top and side. Top navigation provides all the categories and functions of the website. Side navigation provides the multi-level structure of the website.\n\nMore layouts with navigation: [Layout](/components/layout).",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Menu\n\n| Param | Description | Type | Default value | Version |\n| --- | --- | --- | --- | --- |\n| defaultOpenKeys | Array with the keys of default opened sub menus | string\\[] | - |  |\n| defaultSelectedKeys | Array with the keys of default selected menu items | string\\[] | - |  |\n| expandIcon | custom expand icon of submenu | ReactNode \\| `(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode` | - | 4.9.0 |\n| forceSubMenuRender | Render submenu into DOM before it becomes visible | boolean | false |  |\n| inlineCollapsed | Specifies the collapsed status when menu is inline mode | boolean | - |  |\n| inlineIndent | Indent (in pixels) of inline menu items on each level | number | 24 |  |\n| items | Menu item content | [ItemType\\[\\]](#itemtype) | - | 4.20.0 |\n| mode | Type of menu | `vertical` \\| `horizontal` \\| `inline` | `vertical` |  |\n| multiple | Allows selection of multiple items | boolean | false |  |\n| openKeys | Array with the keys of currently opened sub-menus | string\\[] | - |  |\n| overflowedIndicator | Customized the ellipsis icon when menu is collapsed horizontally | ReactNode | `<EllipsisOutlined />` |  |\n| selectable | Allows selecting menu items | boolean | true |  |\n| selectedKeys | Array with the keys of currently selected menu items | string\\[] | - |  |\n| style | Style of the root node | CSSProperties | - |  |\n| subMenuCloseDelay | Delay time to hide submenu when mouse leaves (in seconds) | number | 0.1 |  |\n| subMenuOpenDelay | Delay time to show submenu when mouse enters, (in seconds) | number | 0 |  |\n| theme | Color theme of the menu | `light` \\| `dark` | `light` |  |\n| triggerSubMenuAction | Which action can trigger submenu open/close | `hover` \\| `click` | `hover` |  |\n| onClick | Called when a menu item is clicked | function({ item, key, keyPath, domEvent }) | - |  |\n| onDeselect | Called when a menu item is deselected (multiple mode only) | function({ item, key, keyPath, selectedKeys, domEvent }) | - |  |\n| onOpenChange | Called when sub-menus are opened or closed | function(openKeys: string\\[]) | - |  |\n| onSelect | Called when a menu item is selected | function({ item, key, keyPath, selectedKeys, domEvent }) | - |  |\n\n> More options in [rc-menu](https://github.com/react-component/menu#api)\n\n### ItemType\n\n> type ItemType = [MenuItemType](#MenuItemType) | [SubMenuType](#SubMenuType) | [MenuItemGroupType](#MenuItemGroupType) | [MenuDividerType](#MenuDividerType);\n\n#### MenuItemType\n\n| Param    | Description                          | Type      | Default value | Version |\n| -------- | ------------------------------------ | --------- | ------------- | ------- |\n| danger   | Display the danger style             | boolean   | false         |         |\n| disabled | Whether menu item is disabled        | boolean   | false         |         |\n| icon     | The icon of the menu item            | ReactNode | -             |         |\n| key      | Unique ID of the menu item           | string    | -             |         |\n| label    | Menu label                           | ReactNode | -             |         |\n| title    | Set display title for collapsed item | string    | -             |         |\n\n#### SubMenuType\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default value | Version |\n| --- | --- | --- | --- | --- |\n| children | Sub-menus or sub-menu items | [ItemType\\[\\]](#itemtype) | - |  |\n| disabled | Whether sub-menu is disabled | boolean | false |  |\n| icon | Icon of sub menu | ReactNode | - |  |\n| key | Unique ID of the sub-menu | string | - |  |\n| label | Menu label | ReactNode | - |  |\n| popupClassName | Sub-menu class name, not working when `mode=\"inline\"` | string | - |  |\n| popupOffset | Sub-menu offset, not working when `mode=\"inline\"` | \\[number, number] | - |  |\n| theme | Color theme of the SubMenu (inherits from Menu by default) |  | `light` \\| `dark` | - |  |\n| onTitleClick | Callback executed when the sub-menu title is clicked | function({ key, domEvent }) | - |  |\n\n#### MenuItemGroupType\n\nDefine `type` as `group` to make as group:\n\n```ts\nconst groupItem = {\n  type: 'group', // Must have\n  label: 'My Group',\n  children: [],\n};\n```\n\n| Param    | Description            | Type                              | Default value | Version |\n| -------- | ---------------------- | --------------------------------- | ------------- | ------- |\n| children | Sub-menu items         | [MenuItemType\\[\\]](#menuitemtype) | -             |         |\n| label    | The title of the group | ReactNode                         | -             |         |\n\n#### MenuDividerType\n\nDivider line in between menu items, only used in vertical popup Menu or Dropdown Menu. Need define the `type` as `divider`：\n\n```ts\nconst dividerItem = {\n  type: 'divider', // Must have\n};\n```\n\n| Param  | Description            | Type    | Default value | Version |\n| ------ | ---------------------- | ------- | ------------- | ------- |\n| dashed | Whether line is dashed | boolean | false         |         |"
            },
            "Message": {
              "description": "- To provide feedback such as success, warning, error etc.\n- A message is displayed at top and center and will be dismissed automatically, as a non-interrupting light-weighted prompt.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\nThis component provides some static methods, with usage and arguments as following:\n\n- `message.success(content, [duration], onClose)`\n- `message.error(content, [duration], onClose)`\n- `message.info(content, [duration], onClose)`\n- `message.warning(content, [duration], onClose)`\n- `message.loading(content, [duration], onClose)`\n\n| Argument | Description | Type | Default |\n| --- | --- | --- | --- |\n| content | The content of the message | ReactNode \\| config | - |\n| duration | Time(seconds) before auto-dismiss, don't dismiss if set to 0 | number | 1.5 |\n| onClose | Specify a function that will be called when the message is closed | function | - |\n\n`afterClose` can be called in thenable interface:\n\n- `message[level](content, [duration]).then(afterClose)`\n- `message[level](content, [duration], onClose).then(afterClose)`\n\nwhere `level` refers one static methods of `message`. The result of `then` method will be a Promise.\n\nSupports passing parameters wrapped in an object:\n\n- `message.open(config)`\n- `message.success(config)`\n- `message.error(config)`\n- `message.info(config)`\n- `message.warning(config)`\n- `message.loading(config)`\n\nThe properties of config are as follows:\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| className | Customized CSS class | string | - |\n| content | The content of the message | ReactNode | - |\n| duration | Time(seconds) before auto-dismiss, don't dismiss if set to 0 | number | 3 |\n| icon | Customized Icon | ReactNode | - |\n| key | The unique identifier of the Message | string \\| number | - |\n| style | Customized inline style | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - |\n| onClick | Specify a function that will be called when the message is clicked | function | - |\n| onClose | Specify a function that will be called when the message is closed | function | - |\n\n### Global static methods\n\nMethods for global configuration and destruction are also provided:\n\n- `message.config(options)`\n- `message.destroy()`\n\n> use `message.destroy(key)` to remove a message。\n\n#### message.config\n\n> When you use `ConfigProvider` for global configuration, the system will automatically start RTL mode by default.(4.3.0+)\n>\n> When you want to use it alone, you can start the RTL mode through the following settings.\n\n```js\nmessage.config({\n  top: 100,\n  duration: 2,\n  maxCount: 3,\n  rtl: true,\n  prefixCls: 'my-message',\n});\n```\n\n| Argument | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| duration | Time before auto-dismiss, in seconds | number | 3 |  |\n| getContainer | Return the mount node for Message, but still display at fullScreen | () => HTMLElement | () => document.body |  |\n| maxCount | Max message show, drop oldest if exceed limit | number | - |  |\n| prefixCls | The prefix className of message node | string | `ant-message` | 4.5.0 |\n| rtl | Whether to enable RTL mode | boolean | false |  |\n| top | Distance from top | number | 8 |  |"
            },
            "Modal": {
              "description": "When requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use `Modal` to create a new floating layer over the current page to get user feedback or display information.\n\nAdditionally, if you need show a simple confirmation dialog, you can use [`App.useApp`](/components/app/) hooks.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| afterClose | Specify a function that will be called when modal is closed completely | function | - |  |\n| classNames | Config Modal build-in module's className | `header?: string; body?: string; footer?: string; mask?: string; wrapper?: string;` | - |  |\n| styles | Config Modal build-in module's style | `header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties; wrapper?: CSSProperties;` | - | 5.10.0 |\n| cancelButtonProps | The cancel button props | [ButtonProps](/components/button/#api) | - |  |\n| cancelText | Text of the Cancel button | ReactNode | `Cancel` |  |\n| centered | Centered Modal | boolean | false |  |\n| closeIcon | Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false` | boolean \\| ReactNode | &lt;CloseOutlined /> |  |\n| confirmLoading | Whether to apply loading visual effect for OK button or not | boolean | false |  |\n| destroyOnClose | Whether to unmount child components on onClose | boolean | false |  |\n| focusTriggerAfterClose | Whether need to focus trigger element after dialog is closed | boolean | true | 4.9.0 |\n| footer | Footer content, set as `footer={null}` when you don't need default buttons | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode \\| React.ReactNode | (OK and Cancel buttons) |  |\n| forceRender | Force render Modal | boolean | false |  |\n| getContainer | The mounted node for Modal but still display at fullscreen | HTMLElement \\| () => HTMLElement \\| Selectors \\| false | document.body |  |\n| keyboard | Whether support press esc to close | boolean | true |  |\n| mask | Whether show mask or not | boolean | true |  |\n| maskClosable | Whether to close the modal dialog when the mask (area outside the modal) is clicked | boolean | true |  |\n| modalRender | Custom modal content render | (node: ReactNode) => ReactNode | - | 4.7.0 |\n| okButtonProps | The ok button props | [ButtonProps](/components/button/#api) | - |  |\n| okText | Text of the OK button | ReactNode | `OK` |  |\n| okType | Button `type` of the OK button | string | `primary` |  |\n| style | Style of floating layer, typically used at least for adjusting the position | CSSProperties | - |  |\n| title | The modal dialog's title | ReactNode | - |  |\n| open | Whether the modal dialog is visible or not | boolean | false |  |\n| width | Width of the modal dialog | string \\| number | 520 |  |\n| wrapClassName | The class name of the container of the modal dialog | string | - |  |\n| zIndex | The `z-index` of the Modal | number | 1000 |  |\n| onCancel | Specify a function that will be called when a user clicks mask, close button on top right or Cancel button | function(e) | - |  |\n| onOk | Specify a function that will be called when a user clicks the OK button | function(e) | - |  |\n| afterOpenChange | Callback when the animation ends when Modal is turned on and off | (open: boolean) => void | - | 5.4.0 |\n\n#### Note\n\n- The state of Modal will be preserved at it's component lifecycle by default, if you wish to open it with a brand new state every time, set `destroyOnClose` on it.\n- There is a situation that using `<Modal />` with Form, which won't clear fields value when closing Modal even you have set `destroyOnClose`. You need `<Form preserve={false} />` in this case.\n- `Modal.method()` RTL mode only supports hooks.\n\n### Modal.method()\n\nThere are five ways to display the information based on the content's nature:\n\n- `Modal.info`\n- `Modal.success`\n- `Modal.error`\n- `Modal.warning`\n- `Modal.confirm`\n\nThe items listed above are all functions, expecting a settings object as parameter. The properties of the object are follows:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| afterClose | Specify a function that will be called when modal is closed completely | function | - | 4.9.0 |\n| autoFocusButton | Specify which button to autofocus | null \\| `ok` \\| `cancel` | `ok` |  |\n| cancelButtonProps | The cancel button props | [ButtonProps](/components/button/#api) | - |  |\n| cancelText | Text of the Cancel button with Modal.confirm | string | `Cancel` |  |\n| centered | Centered Modal | boolean | false |  |\n| className | The className of container | string | - |  |\n| closeIcon | Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false` | boolean \\| ReactNode | &lt;CloseOutlined /> |  |\n| content | Content | ReactNode | - |  |\n| footer | Footer content, set as `footer: null` when you don't need default buttons | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode \\| React.ReactNode | - | 5.9.0 |\n| getContainer | Return the mount node for Modal | HTMLElement \\| () => HTMLElement \\| Selectors \\| false | document.body |  |\n| icon | Custom icon | ReactNode | &lt;ExclamationCircleFilled /> |  |\n| keyboard | Whether support press esc to close | boolean | true |  |\n| mask | Whether show mask or not. | boolean | true |  |\n| maskClosable | Whether to close the modal dialog when the mask (area outside the modal) is clicked | boolean | false |  |\n| okButtonProps | The ok button props | [ButtonProps](/components/button/#api) | - |  |\n| okText | Text of the OK button | string | `OK` |  |\n| okType | Button `type` of the OK button | string | `primary` |  |\n| style | Style of floating layer, typically used at least for adjusting the position | CSSProperties | - |  |\n| title | Title | ReactNode | - |  |\n| width | Width of the modal dialog | string \\| number | 416 |  |\n| wrapClassName | The class name of the container of the modal dialog | string | - | 4.18.0 |\n| zIndex | The `z-index` of the Modal | number | 1000 |  |\n| onCancel | Specify a function that will be called when the user clicks the Cancel button. The parameter of this function is a function whose execution should include closing the dialog. If the function does not take any parameter (`!onCancel.length`) then modal dialog will be closed unless returned value is `true` (`!!onCancel()`). You can also just return a promise and when the promise is resolved, the modal dialog will also be closed | function(close) | - |  |\n| onOk | Specify a function that will be called when the user clicks the OK button. The parameter of this function is a function whose execution should include closing the dialog. If the function does not take any parameter (`!onOk.length`) then modal dialog will be closed unless returned value is `true` (`!!onOk()`). You can also just return a promise and when the promise is resolved, the modal dialog will also be closed | function(close) | - |  |\n\nAll the `Modal.method`s will return a reference, and then we can update and close the modal dialog by the reference.\n\n```jsx\nconst modal = Modal.info();\n\nmodal.update({\n  title: 'Updated title',\n  content: 'Updated content',\n});\n\n// on 4.8.0 or above, you can pass a function to update modal\nmodal.update((prevConfig) => ({\n  ...prevConfig,\n  title: `${prevConfig.title} (New)`,\n}));\n\nmodal.destroy();\n```\n\n- `Modal.destroyAll`\n\n`Modal.destroyAll()` could destroy all confirmation modal dialogs(`Modal.confirm|success|info|error|warning`). Usually, you can use it in router change event to destroy confirm modal dialog automatically without use modal reference to close( it's too complex to use for all modal dialogs)\n\n```jsx\nimport { browserHistory } from 'react-router';\n\n// router change\nbrowserHistory.listen(() => {\n  Modal.destroyAll();\n});\n```\n\n### Modal.useModal()\n\nWhen you need using Context, you can use `contextHolder` which created by `Modal.useModal` to insert into children. Modal created by hooks will get all the context where `contextHolder` are. Created `modal` has the same creating function with `Modal.method`.\n\n```jsx\nconst [modal, contextHolder] = Modal.useModal();\n\nReact.useEffect(() => {\n  modal.confirm({\n    // ...\n  });\n}, []);\n\nreturn <div>{contextHolder}</div>;\n```\n\n`modal.confirm` return method:\n\n- `destroy`: Destroy current modal\n- `update`: Update current modal\n- `then`: (Hooks only) Promise chain call, support `await` operation\n\n```tsx\n// Return `true` when click `onOk` and `false` when click `onCancel`\nconst confirmed = await modal.confirm({ ... });\n```"
            },
            "Notification": {
              "description": "To display a notification message at any of the four corners of the viewport. Typically it can be used in the following cases:\n\n- A notification with complex content.\n- A notification providing a feedback based on the user interaction. Or it may show some details about upcoming steps the user may have to follow.\n- A notification that is pushed by the application.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n- `notification.success(config)`\n- `notification.error(config)`\n- `notification.info(config)`\n- `notification.warning(config)`\n- `notification.open(config)`\n- `notification.destroy(key?: String)`\n\nThe properties of config are as follows:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| btn | Customized close button | ReactNode | - | - |\n| className | Customized CSS class | string | - | - |\n| closeIcon | Custom close icon | boolean \\| ReactNode | true | 5.7.0: close button will be hidden when setting to null or false |\n| description | The content of notification box (required) | ReactNode | - | - |\n| duration | Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically | number | 4.5 | - |\n| icon | Customized icon | ReactNode | - | - |\n| key | The unique identifier of the Notification | string | - | - |\n| message | The title of notification box (required) | ReactNode | - | - |\n| placement | Position of Notification, can be one of `topLeft` `topRight` `bottomLeft` `bottomRight` | string | `topRight` | - |\n| style | Customized inline style | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - | - |\n| role | The semantics of notification content recognized by screen readers. The default value is `alert`. When set as the default value, the screen reader will promptly interrupt any ongoing content reading and prioritize the notification content for immediate attention. | `alert \\| status` | `alert` | 5.6.0 |\n| onClick | Specify a function that will be called when the notification is clicked | function | - | - |\n| onClose | Trigger when notification closed | function | - | - |\n| props | An object that can contain `data-*`, `aria-*`, or `role` props, to be put on the notification `div`. This currently only allows `data-testid` instead of `data-*` in TypeScript. See https://github.com/microsoft/TypeScript/issues/28960. | Object | - | - |\n\n- `notification.useNotification(config)`\n\nThe properties of config are as follows:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bottom | Distance from the bottom of the viewport, when `placement` is `bottomRight` or `bottomLeft` (unit: pixels) | number | 24 |  |\n| closeIcon | Custom close icon | boolean \\| ReactNode | true | 5.7.0: close button will be hidden when setting to null or false |\n| getContainer | Return the mount node for Notification | () => HTMLNode | () => document.body |  |\n| placement | Position of Notification, can be one of `topLeft` `topRight` `bottomLeft` `bottomRight` | string | `topRight` |  |\n| rtl | Whether to enable RTL mode | boolean | false |  |\n| stack | Notifications will be stacked when amount is over threshold | boolean \\| `{ threshold: number }` | `{ threshold: 3 }` | 5.10.0 |\n| top | Distance from the top of the viewport, when `placement` is `topRight` or `topLeft` (unit: pixels) | number | 24 |  |\n| maxCount | Max Notification show, drop oldest if exceed limit | number | - | 4.17.0 |\n\n`notification` also provides a global `config()` method that can be used for specifying the default options. Once this method is used, all the notification boxes will take into account these globally defined options when displaying.\n\n### Global configuration\n\n`notification.config(options)`\n\n> When you use `ConfigProvider` for global configuration, the system will automatically start RTL mode by default.(4.3.0+)\n>\n> When you want to use it alone, you can start the RTL mode through the following settings.\n\n#### notification.config\n\n```js\nnotification.config({\n  placement: 'bottomRight',\n  bottom: 50,\n  duration: 3,\n  rtl: true,\n});\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bottom | Distance from the bottom of the viewport, when `placement` is `bottomRight` or `bottomLeft` (unit: pixels) | number | 24 |  |\n| closeIcon | Custom close icon | boolean \\| ReactNode | true | 5.7.0: close button will be hidden when setting to null or false |\n| duration | Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically | number | 4.5 |  |\n| getContainer | Return the mount node for Notification, but still display at fullScreen | () => HTMLNode | () => document.body |  |\n| placement | Position of Notification, can be one of `topLeft` `topRight` `bottomLeft` `bottomRight` | string | `topRight` |  |\n| rtl | Whether to enable RTL mode | boolean | false |  |\n| top | Distance from the top of the viewport, when `placement` is `topRight` or `topLeft` (unit: pixels) | number | 24 |  |\n| maxCount | Max Notification show, drop oldest if exceed limit | number | - | 4.17.0 |"
            },
            "Pagination": {
              "description": "- When it will take a long time to load/render all items.\n- If you want to browse the data by navigating through pages.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n```jsx\n<Pagination onChange={onChange} total={50} />\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| current | Current page number | number | - |  |\n| defaultCurrent | Default initial page number | number | 1 |  |\n| defaultPageSize | Default number of data items per page | number | 10 |  |\n| disabled | Disable pagination | boolean | - |  |\n| hideOnSinglePage | Whether to hide pager on single page | boolean | false |  |\n| itemRender | To customize item's innerHTML | (page, type: 'page' \\| 'prev' \\| 'next', originalElement) => React.ReactNode | - |  |\n| pageSize | Number of data items per page | number | - |  |\n| pageSizeOptions | Specify the sizeChanger options | string\\[] \\| number\\[] | \\[`10`, `20`, `50`, `100`] |  |\n| responsive | If `size` is not specified, `Pagination` would resize according to the width of the window | boolean | - |  |\n| showLessItems | Show less page items | boolean | false |  |\n| showQuickJumper | Determine whether you can jump to pages directly | boolean \\| { goButton: ReactNode } | false |  |\n| showSizeChanger | Determine whether to show `pageSize` select, it will be true when `total > 50` | boolean | - |  |\n| showTitle | Show page item's title | boolean | true |  |\n| showTotal | To display the total number and range | function(total, range) | - |  |\n| simple | Whether to use simple mode | boolean | - |  |\n| size | Specify the size of `Pagination`, can be set to `small` | `default` \\| `small` | `default` |  |\n| total | Total number of data items | number | 0 |  |\n| onChange | Called when the page number or `pageSize` is changed, and it takes the resulting page number and pageSize as its arguments | function(page, pageSize) | - |  |\n| onShowSizeChange | Called when `pageSize` is changed | function(current, size) | - |  |"
            },
            "Popconfirm": {
              "description": "A simple and compact dialog used for asking for user confirmation.\n\nThe difference with the `confirm` modal dialog is that it's more lightweight than the static popped full-screen confirm modal.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Param | Description | Type | Default value | Version |\n| --- | --- | --- | --- | --- |\n| cancelButtonProps | The cancel button props | [ButtonProps](/components/button/#api) | - |  |\n| cancelText | The text of the Cancel button | string | `Cancel` |  |\n| disabled | Whether show popconfirm when click its childrenNode | boolean | false |  |\n| icon | Customize icon of confirmation | ReactNode | &lt;ExclamationCircle /> |  |\n| okButtonProps | The ok button props | [ButtonProps](/components/button/#api) | - |  |\n| okText | The text of the Confirm button | string | `OK` |  |\n| okType | Button `type` of the Confirm button | string | `primary` |  |\n| showCancel | Show cancel button | boolean | true | 4.18.0 |\n| title | The title of the confirmation box | ReactNode \\| () => ReactNode | - |  |\n| description | The description of the confirmation box title | ReactNode \\| () => ReactNode | - | 5.1.0 |\n| onCancel | A callback of cancel | function(e) | - |  |\n| onConfirm | A callback of confirmation | function(e) | - |  |\n| onPopupClick | A callback of popup click | function(e) | - | 5.5.0 |\n\nConsult [Tooltip's documentation](/components/tooltip/#api) to find more APIs."
            },
            "Popover": {
              "description": "A simple popup menu to provide extra information or operations.\n\nComparing with `Tooltip`, besides information `Popover` card can also provide action elements like links and buttons.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Param   | Description         | Type                         | Default value | Version |\n| ------- | ------------------- | ---------------------------- | ------------- | ------- |\n| content | Content of the card | ReactNode \\| () => ReactNode | -             |         |\n| title   | Title of the card   | ReactNode \\| () => ReactNode | -             |         |\n\nConsult [Tooltip's documentation](/components/tooltip/#api) to find more APIs."
            },
            "Progress": {
              "description": "If it will take a long time to complete an operation, you can use `Progress` to show the current progress and status.\n\n- When an operation will interrupt the current interface, or it needs to run in the background for more than 2 seconds.\n- When you need to display the completion percentage of an operation.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\nProperties that shared by all types.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| format | The template function of the content | function(percent, successPercent) | (percent) => percent + `%` | - |\n| percent | To set the completion percentage | number | 0 | - |\n| showInfo | Whether to display the progress value and the status icon | boolean | true |\n| status | To set the status of the Progress, options: `success` `exception` `normal` `active`(line only) | string | - |\n| strokeColor | The color of progress bar | string | - | - |\n| strokeLinecap | To set the style of the progress linecap | `round` \\| `butt` \\| `square`, see [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) | `round` | - |\n| success | Configs of successfully progress bar | { percent: number, strokeColor: string } | - | - |\n| trailColor | The color of unfilled part | string | - | - |\n| type | To set the type, options: `line` `circle` `dashboard` | string | `line` |\n| size | Progress size | number \\| \\[number \\| string, number] \\| \"small\" \\| \"default\" | \"default\" | v5.3.0 |\n\n### `type=\"line\"`\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| steps | The total step count | number | - | - |\n| strokeColor | The color of progress bar, render `linear-gradient` when passing an object, could accept `string[]` when has `steps`. | string \\| string[] \\| { from: string; to: string; direction: string } | - | 4.21.0: `string[]` |\n\n### `type=\"circle\"`\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| strokeColor | The color of circular progress, render gradient when passing an object | string \\| { number%: string } | - | - |\n| strokeWidth | To set the width of the circular progress, unit: percentage of the canvas width | number | 6 | - |\n\n### `type=\"dashboard\"`\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| gapDegree | The gap degree of half circle, 0 ~ 295 | number | 75 |\n| gapPosition | The gap position, options: `top` `bottom` `left` `right` | string | `bottom` |\n| strokeWidth | To set the width of the dashboard progress, unit: percentage of the canvas width | number | 6 |"
            },
            "QRCode": {
              "description": "Used when the text needs to be converted into a QR Code.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n> This component is available since `@private-basic-components@5.1.0`\n\n| Property | Description | Type | Default | Version |\n| :-- | :-- | :-- | :-- | :-- |\n| value | scanned text | string | - |\n| type | render type | `canvas \\| svg ` | `canvas` | 5.6.0 |\n| icon | include image url (only image link are supported) | string | - |\n| size | QRCode size | number | 128 |\n| iconSize | include image size | number | 32 |\n| color | QRCode Color | string | `#000` |\n| bgColor | QRCode Background Color | string | `transparent` | 5.5.0 |\n| bordered | Whether has border style | boolean | `true` |\n| errorLevel | Error Code Level | `'L' \\| 'M' \\| 'Q' \\| 'H' ` | `M` |\n| status | QRCode status | `active \\| expired \\| loading ` | `active` |\n| onRefresh | callback | `() => void` | - |"
            },
            "Radio": {
              "description": "- Used to select a single state from multiple options.\n- The difference from Select is that Radio is visible to the user and can facilitate the comparison of choice, which means there shouldn't be too many of them.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Radio/Radio.Button\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| autoFocus | Whether get focus when component mounted | boolean | false |\n| checked | Specifies whether the radio is selected | boolean | false |\n| defaultChecked | Specifies the initial state: whether or not the radio is selected | boolean | false |\n| disabled | Disable radio | boolean | false |\n| value | According to value for comparison, to determine whether the selected | any | - |\n\n### RadioGroup\n\nRadio group can wrap a group of `Radio`。\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| buttonStyle | The style type of radio button | `outline` \\| `solid` | `outline` |  |\n| defaultValue | Default selected value | any | - |  |\n| disabled | Disable all radio buttons | boolean | false |  |\n| name | The `name` property of all `input[type=\"radio\"]` children | string | - |  |\n| options | Set children optional | string\\[] \\| number\\[] \\| Array&lt;{ label: ReactNode; value: string; disabled?: boolean; }> | - |  |\n| optionType | Set Radio optionType | `default` \\| `button` | `default` | 4.4.0 |\n| size | The size of radio button style | `large` \\| `middle` \\| `small` | - |  |\n| value | Used for setting the currently selected value | any | - |  |\n| onChange | The callback function that is triggered when the state changes | function(e:Event) | - |  |"
            },
            "Rate": {
              "description": "- Show evaluation.\n- A quick rating operation on something.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Whether to allow clear when click again | boolean | true |  |\n| allowHalf | Whether to allow semi selection | boolean | false |  |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| character | The custom character of rate | ReactNode \\| (RateProps) => ReactNode | &lt;StarFilled /> | function(): 4.4.0 |\n| className | The custom class name of rate | string | - |  |\n| count | Star count | number | 5 |  |\n| defaultValue | The default value | number | 0 |  |\n| disabled | If read only, unable to interact | boolean | false |  |\n| style | The custom style object of rate | CSSProperties | - |  |\n| tooltips | Customize tooltip by each character | string\\[] | - |  |\n| value | The current value | number | - |  |\n| onBlur | Callback when component lose focus | function() | - |  |\n| onChange | Callback when select value | function(value: number) | - |  |\n| onFocus | Callback when component get focus | function() | - |  |\n| onHoverChange | Callback when hover item | function(value: number) | - |  |\n| onKeyDown | Callback when keydown on component | function(event) | - |  |"
            },
            "Result": {
              "description": "Use when important operations need to inform the user to process the results and the feedback is more complicated.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| extra | Operating area | ReactNode | - |\n| icon | Custom back icon | ReactNode | - |\n| status | Result status, decide icons and colors | `success` \\| `error` \\| `info` \\| `warning` \\| `404` \\| `403` \\| `500` | `info` |\n| subTitle | The subTitle | ReactNode | - |\n| title | The title | ReactNode | - |"
            },
            "Segmented": {
              "description": "- When displaying multiple options and user can select a single option;\n- When switching the selected option, the content of the associated area changes.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n> This component is available since `@private-basic-components@4.20.0`\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| block | Option to fit width to its parent\\'s width | boolean | false |  |\n| defaultValue | Default selected value | string \\| number |  |  |\n| disabled | Disable all segments | boolean | false |  |\n| onChange | The callback function that is triggered when the state changes | function(value: string \\| number) |  |  |\n| options | Set children optional | string\\[] \\| number\\[] \\| Array<{ label: ReactNode value: string icon? ReactNode disabled?: boolean className?: string }> | [] |  |\n| size | The size of the Segmented. | `large` \\| `middle` \\| `small` | `middle` |  |\n| value | Currently selected value | string \\| number |  |  |"
            },
            "Select": {
              "description": "- A dropdown menu for displaying choices - an elegant alternative to the native `<select>` element.\n- Utilizing [Radio](/components/radio/) is recommended when there are fewer total options (less than 5).\n- You probably need [AutoComplete](/components/auto-complete/) if you're looking for an input box that can be typed or selected.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Select props\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Customize clear icon | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: Support object type |\n| autoClearSearchValue | Whether the current search will be cleared on selecting an item. Only applies when `mode` is set to `multiple` or `tags` | boolean | true |  |\n| autoFocus | Get focus by default | boolean | false |  |\n| bordered | Whether has border style | boolean | true |  |\n| defaultActiveFirstOption | Whether active first option by default | boolean | true |  |\n| defaultOpen | Initial open state of dropdown | boolean | - |  |\n| defaultValue | Initial selected option | string \\| string\\[] \\| <br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[] | - |  |\n| disabled | Whether disabled select | boolean | false |  |\n| popupClassName | The className of dropdown menu | string | - | 4.23.0 |\n| popupMatchSelectWidth | Determine whether the popup menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll | boolean \\| number | true | 5.5.0 |\n| dropdownRender | Customize dropdown content | (originNode: ReactNode) => ReactNode | - |  |\n| dropdownStyle | The style of dropdown menu | CSSProperties | - |  |\n| fieldNames | Customize node label, value, options，groupLabel field name | object | { label: `label`, value: `value`, options: `options`, groupLabel: `label` } | 4.17.0 (`groupLabel` added in 5.6.0) |\n| filterOption | If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns `true`, the option will be included in the filtered set; Otherwise, it will be excluded | boolean \\| function(inputValue, option) | true |  |\n| filterSort | Sort function for search options sorting, see [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)'s compareFunction | (optionA: Option, optionB: Option) => number | - | 4.9.0 |\n| getPopupContainer | Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative. [Example](https://codesandbox.io/s/4j168r7jw0) | function(triggerNode) | () => document.body |  |\n| labelInValue | Whether to embed label in value, turn the format of value from `string` to { value: string, label: ReactNode } | boolean | false |  |\n| listHeight | Config popup height | number | 256 |  |\n| loading | Indicate loading state | boolean | false |  |\n| maxTagCount | Max tag count to show. `responsive` will cost render performance | number \\| `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | Placeholder for not showing tags | ReactNode \\| function(omittedValues) | - |  |\n| maxTagTextLength | Max tag text length to show | number | - |  |\n| menuItemSelectedIcon | The custom menuItemSelected icon with multiple options | ReactNode | - |  |\n| mode | Set mode of Select | `multiple` \\| `tags` | - |  |\n| notFoundContent | Specify content to show when no result matches | ReactNode | `Not Found` |  |\n| open | Controlled open state of dropdown | boolean | - |  |\n| optionFilterProp | Which prop value of option will be used for filter if filterOption is true. If `options` is set, it should be set to `label` | string | `value` |  |\n| optionLabelProp | Which prop value of option will render as content of select. [Example](https://codesandbox.io/s/@private-basic-components-reproduction-template-tk678) | string | `children` |  |\n| options | Select options. Will get better perf than jsx definition | { label, value }\\[] | - |  |\n| placeholder | Placeholder of select | ReactNode | - |  |\n| placement | The position where the selection box pops up | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| removeIcon | The custom remove icon | ReactNode | - |  |\n| searchValue | The current input \"search\" text | string | - |  |\n| showSearch | Whether select is searchable | boolean | single: false, multiple: true |  |\n| size | Size of Select input | `large` \\| `middle` \\| `small` | `middle` |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| suffixIcon | The custom suffix icon. Customize icon will not response click open to avoid icon designed to do other interactive. You can use `pointer-events: none` style to bypass | ReactNode | `<DownOutlined />` |  |\n| tagRender | Customize tag render, only applies when `mode` is set to `multiple` or `tags` | (props) => ReactNode | - |  |\n| tokenSeparators | Separator used to tokenize, only applies when `mode=\"tags\"` | string\\[] | - |  |\n| value | Current selected option (considered as a immutable array) | string \\| string\\[] \\| <br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[] | - |  |\n| virtual | Disable virtual scroll when set to false | boolean | true | 4.1.0 |\n| onBlur | Called when blur | function | - |  |\n| onChange | Called when select an option or input value change | function(value, option:Option \\| Array&lt;Option>) | - |  |\n| onClear | Called when clear | function | - | 4.6.0 |\n| onDeselect | Called when an option is deselected, param is the selected option's value. Only called for `multiple` or `tags`, effective in multiple or tags mode only | function(value: string \\| number \\| LabeledValue) | - |  |\n| onDropdownVisibleChange | Called when dropdown open | function(open) | - |  |\n| onFocus | Called when focus | function | - |  |\n| onInputKeyDown | Called when key pressed | function | - |  |\n| onMouseEnter | Called when mouse enter | function | - |  |\n| onMouseLeave | Called when mouse leave | function | - |  |\n| onPopupScroll | Called when dropdown scrolls | function | - |  |\n| onSearch | Callback function that is fired when input changed | function(value: string) | - |  |\n| onSelect | Called when an option is selected, the params are option's value (or key) and option instance | function(value: string \\| number \\| LabeledValue, option: Option) | - |  |\n\n> Note, if you find that the drop-down menu scrolls with the page, or you need to trigger Select in other popup layers, please try to use `getPopupContainer={triggerNode => triggerNode.parentElement}` to fix the drop-down popup rendering node in the parent element of the trigger .\n\n### Select Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n### Option props\n\n| Property  | Description                          | Type             | Default | Version |\n| --------- | ------------------------------------ | ---------------- | ------- | ------- |\n| className | The additional class to option       | string           | -       |         |\n| disabled  | Disable this option                  | boolean          | false   |         |\n| title     | `title` attribute of Select Option   | string           | -       |         |\n| value     | Default to filter with this property | string \\| number | -       |         |\n\n### OptGroup props\n\n| Property | Description | Type                    | Default | Version |\n| -------- | ----------- | ----------------------- | ------- | ------- |\n| key      | Group key   | string                  | -       |         |\n| label    | Group label | string \\| React.Element | -       |         |"
            },
            "Skeleton": {
              "description": "- When a resource needs long time to load.\n- When the component contains lots of information, such as List or Card.\n- Only works when loading data for the first time.\n- Could be replaced by Spin in any situation, but can provide a better user experience.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Skeleton\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| active | Show animation effect | boolean | false |\n| avatar | Show avatar placeholder | boolean \\| [SkeletonAvatarProps](#skeletonavatarprops) | false |\n| loading | Display the skeleton when true | boolean | - |\n| paragraph | Show paragraph placeholder | boolean \\| [SkeletonParagraphProps](#skeletonparagraphprops) | true |\n| round | Show paragraph and title radius when true | boolean | false |\n| title | Show title placeholder | boolean \\| [SkeletonTitleProps](#skeletontitleprops) | true |\n\n### SkeletonAvatarProps\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| active | Show animation effect, only valid when used avatar independently | boolean | false |\n| shape | Set the shape of avatar | `circle` \\| `square` | - |\n| size | Set the size of avatar | number \\| `large` \\| `small` \\| `default` | - |\n\n### SkeletonTitleProps\n\n| Property | Description            | Type             | Default |\n| -------- | ---------------------- | ---------------- | ------- |\n| width    | Set the width of title | number \\| string | -       |\n\n### SkeletonParagraphProps\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| rows | Set the row count of paragraph | number | - |\n| width | Set the width of paragraph. When width is an Array, it can set the width of each row. Otherwise only set the last row width | number \\| string \\| Array&lt;number \\| string> | - |\n\n### SkeletonButtonProps\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| active | Show animation effect | boolean | false |  |\n| block | Option to fit button width to its parent width | boolean | false | 4.17.0 |\n| shape | Set the shape of button | `circle` \\| `round` \\| `square` \\| `default` | - |  |\n| size | Set the size of button | `large` \\| `small` \\| `default` | - |  |\n\n### SkeletonInputProps\n\n| Property | Description           | Type                            | Default |\n| -------- | --------------------- | ------------------------------- | ------- |\n| active   | Show animation effect | boolean                         | false   |\n| size     | Set the size of input | `large` \\| `small` \\| `default` | -       |"
            },
            "Slider": {
              "description": "To input a value in a range.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoAdjustOverflow | Whether to automatically adjust the popup position | boolean | true | 5.8.0 |\n| autoFocus | Whether get focus when component mounted | boolean | false |  |\n| defaultValue | The default value of slider. When `range` is false, use number, otherwise, use \\[number, number] | number \\| \\[number, number] | 0 \\| \\[0, 0] |  |\n| disabled | If true, the slider will not be intractable | boolean | false |  |\n| keyboard | Support using keyboard to move handlers | boolean | true | 5.2.0+ |\n| dots | Whether the thumb can drag over tick only | boolean | false |  |\n| included | Make effect when `marks` not null, true means containment and false means coordinative | boolean | true |  |\n| marks | Tick mark of Slider, type of key must be `number`, and must in closed interval \\[min, max], each mark can declare its own style | object | { number: ReactNode } \\| { number: { style: CSSProperties, label: ReactNode } } |  |\n| max | The maximum value the slider can slide to | number | 100 |  |\n| min | The minimum value the slider can slide to | number | 0 |  |\n| range | Dual thumb mode | boolean | false |  |\n| reverse | Reverse the component | boolean | false |  |\n| step | The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When `marks` no null, `step` can be null | number \\| null | 1 |  |\n| tooltip | The tooltip relate props | [tooltip](#tooltip) | - | 4.23.0 |\n| value | The value of slider. When `range` is false, use number, otherwise, use \\[number, number] | number \\| \\[number, number] | - |  |\n| vertical | If true, the slider will be vertical | boolean | false |  |\n| onAfterChange | Fire when onmouseup is fired | (value) => void | - |  |\n| onChange | Callback function that is fired when the user changes the slider's value | (value) => void | - |  |\n\n### `styles` 和 `classNames` 属性\n\n| Property | Description                                 | Version |\n| -------- | ------------------------------------------- | ------- |\n| track    | The track between handle to handle in range | 5.10.0  |\n| tracks   | Who track in range                          | 5.10.0  |\n| rail     | Background rail                             | 5.10.0  |\n| handle   | The handle pointer                          | 5.10.0  |\n\n### range\n\n| Property       | Description                     | Type    | Default | Version |\n| -------------- | ------------------------------- | ------- | ------- | ------- |\n| draggableTrack | Whether range track can be drag | boolean | false   | 4.10.0  |\n\n### tooltip\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| open | If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering | boolean | - | 4.23.0 |\n| placement | Set Tooltip display position. Ref [Tooltip](/components/tooltip/) | string | - | 4.23.0 |\n| getPopupContainer | The DOM container of the Tooltip, the default behavior is to create a div element in body | (triggerNode) => HTMLElement | () => document.body | 4.23.0 |\n| formatter | Slider will pass its value to `formatter`, and display its value in Tooltip, and hide Tooltip when return value is null | value => ReactNode \\| null | IDENTITY | 4.23.0 |"
            },
            "Space": {
              "description": "- Avoid components clinging together and set a unified space.\n- Use Space.Compact when child form components are compactly connected and the border is collapsed (After version `@private-basic-components@4.24.0` Supported).",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| align | Align items | `start` \\| `end` \\|`center` \\|`baseline` | - | 4.2.0 |\n| direction | The space direction | `vertical` \\| `horizontal` | `horizontal` | 4.1.0 |\n| size | The space size | [Size](#size) \\| [Size\\[\\]](#size) | `small` | 4.1.0 \\| Array: 4.9.0 |\n| split | Set split | ReactNode | - | 4.7.0 |\n| wrap | Auto wrap line, when `horizontal` effective | boolean | false | 4.9.0 |\n\n### Size\n\n`'small' | 'middle' | 'large' | number`\n\n### Space.Compact\n\nUse Space.Compact when child form components are compactly connected and the border is collapsed. The supported components are：\n\n- Button\n- AutoComplete\n- Cascader\n- DatePicker\n- Input/Input.Search\n- Select\n- TimePicker\n- TreeSelect\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| block | Option to fit width to its parent\\'s width | boolean | false | 4.24.0 |\n| direction | Set direction of layout | `vertical` \\| `horizontal` | `horizontal` | 4.24.0 |\n| size | Set child component size | `large` \\| `middle` \\| `small` | `middle` | 4.24.0 |\n\n### `styles` and `classNames` attribute\n\n<!-- prettier-ignore -->\n| Property | Description | Version |\n| -------- | ------------------------- | ------- |\n| item     | set `Space` child element | 5.6.0   |"
            },
            "Spin": {
              "description": "When part of the page is waiting for asynchronous data or during a rendering process, an appropriate loading animation can effectively alleviate users' inquietude.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| delay | Specifies a delay in milliseconds for loading state (prevent flush) | number (milliseconds) | - |\n| indicator | React node of the spinning indicator | ReactNode | - |\n| size | The size of Spin, options: `small`, `default` and `large` | string | `default` |\n| spinning | Whether Spin is visible | boolean | true |\n| tip | Customize description content when Spin has children | ReactNode | - |\n| wrapperClassName | The className of wrapper when Spin has children | string | - |\n\n### Static Method\n\n- `Spin.setDefaultIndicator(indicator: ReactNode)`\n\n  You can define default spin element globally."
            },
            "Statistic": {
              "description": "- When want to highlight some data.\n- When want to display statistic data with description.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n#### Statistic\n\n| Property         | Description                   | Type                 | Default | Version |\n| ---------------- | ----------------------------- | -------------------- | ------- | ------- |\n| decimalSeparator | The decimal separator         | string               | `.`     |         |\n| formatter        | Customize value display logic | (value) => ReactNode | -       |         |\n| groupSeparator   | Group separator               | string               | `,`     |         |\n| loading          | Loading status of Statistic   | boolean              | false   | 4.8.0   |\n| precision        | The precision of input value  | number               | -       |         |\n| prefix           | The prefix node of value      | ReactNode            | -       |         |\n| suffix           | The suffix node of value      | ReactNode            | -       |         |\n| title            | Display title                 | ReactNode            | -       |         |\n| value            | Display value                 | string \\| number     | -       |         |\n| valueStyle       | Set value section style       | CSSProperties        | -       |         |\n\n#### Statistic.Countdown\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| format | Format as [dayjs](https://day.js.org/) | string | `HH:mm:ss` |  |\n| prefix | The prefix node of value | ReactNode | - |  |\n| suffix | The suffix node of value | ReactNode | - |  |\n| title | Display title | ReactNode | - |  |\n| value | Set target countdown time | number \\| dayjs | - |  |\n| valueStyle | Set value section style | CSSProperties | - |  |\n| onFinish | Trigger when time's up | () => void | - |  |\n| onChange | Trigger when time's changing | (value: number) => void | - | 4.16.0 |"
            },
            "Steps": {
              "description": "When a given task is complicated or has a certain sequence in the series of subtasks, we can decompose it into several steps to make things easier.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Steps\n\nThe whole of the step bar.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| className | Additional class to Steps | string | - |  |\n| current | To set the current step, counting from 0. You can overwrite this state by using `status` of `Step` | number | 0 |  |\n| direction | To specify the direction of the step bar, `horizontal` or `vertical` | string | `horizontal` |  |\n| initial | Set the initial step, counting from 0 | number | 0 |  |\n| labelPlacement | Place title and description with `horizontal` or `vertical` direction | string | `horizontal` |  |\n| percent | Progress circle percentage of current step in `process` status (only works on basic Steps) | number | - | 4.5.0 |\n| progressDot | Steps with progress dot style, customize the progress dot by setting it to a function. labelPlacement will be `vertical` | boolean \\| (iconDot, {index, status, title, description}) => ReactNode | false |  |\n| responsive | Change to vertical direction when screen width smaller than `532px` | boolean | true |  |\n| size | To specify the size of the step bar, `default` and `small` are currently supported | string | `default` |  |\n| status | To specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error` | string | `process` |  |\n| type | Type of steps, can be set to one of the following values: `default` `navigation` `inline` | string | `default` | inline: 5.0 |\n| onChange | Trigger when Step is changed | (current) => void | - |  |\n| items | StepItem content | [StepItem](#stepitem) | [] | 4.24.0 |\n\n### `type=\"inline\"`\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| className | Additional class to Steps | string | - |  |\n| current | To set the current step, counting from 0. You can overwrite this state by using `status` of `Step` | number | 0 |  |\n| initial | Set the initial step, counting from 0 | number | 0 |  |\n| status | To specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error` | string | `process` |  |\n| onChange | Trigger when Step is changed | (current) => void | - |  |\n| items | StepItem content. not supported: `icon` `subtitle` | [StepItem](#stepitem) | [] | 4.24.0 |\n\n### StepItem\n\nA single step in the step bar.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| description | Description of the step, optional property | ReactNode | - |  |\n| disabled | Disable click | boolean | false |  |\n| icon | Icon of the step, optional property | ReactNode | - |  |\n| status | To specify the status. It will be automatically set by `current` of `Steps` if not configured. Optional values are: `wait` `process` `finish` `error` | string | `wait` |  |\n| subTitle | Subtitle of the step | ReactNode | - |  |\n| title | Title of the step | ReactNode | - |  |"
            },
            "Switch": {
              "description": "- If you need to represent the switching between two states or on-off state.\n- The difference between `Switch` and `Checkbox` is that `Switch` will trigger a state change directly when you toggle it, while `Checkbox` is generally used for state marking, which should work in conjunction with submit operation.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| autoFocus | Whether get focus when component mounted | boolean | false |\n| checked | Determine whether the Switch is checked | boolean | false |\n| checkedChildren | The content to be shown when the state is checked | ReactNode | - |\n| className | The additional class to Switch | string | - |\n| defaultChecked | Whether to set the initial state | boolean | false |\n| disabled | Disable switch | boolean | false |\n| loading | Loading state of switch | boolean | false |\n| size | The size of the Switch, options: `default` `small` | string | `default` |\n| unCheckedChildren | The content to be shown when the state is unchecked | ReactNode | - |\n| onChange | Trigger when the checked state is changing | function(checked: boolean, event: Event) | - |\n| onClick | Trigger when clicked | function(checked: boolean, event: Event) | - |"
            },
            "Table": {
              "description": "- To display a collection of structured data.\n- To sort, search, paginate, filter data.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Table\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bordered | Whether to show all table borders | boolean | false |  |\n| columns | Columns of table | [ColumnsType](#column)\\[] | - |  |\n| components | Override default table elements | [TableComponents](https://github.com/react-component/table/blob/75ee0064e54a4b3215694505870c9d6c817e9e4a/src/interface.ts#L129) | - |  |\n| dataSource | Data record array to be displayed | object\\[] | - |  |\n| expandable | Config expandable content | [expandable](#expandable) | - |  |\n| footer | Table footer renderer | function(currentPageData) | - |  |\n| getPopupContainer | The render container of dropdowns in table | (triggerNode) => HTMLElement | () => TableHtmlElement |  |\n| loading | Loading status of table | boolean \\| [Spin Props](/components/spin/#api) | false |  |\n| locale | The i18n text including filter, sort, empty text, etc | object | [Default Value](https://github.com/@private-basic-components/@private-basic-components/blob/6dae4a7e18ad1ba193aedd5ab6867e1d823e2aa4/components/locale/en_US.tsx#L19-L37) |  |\n| pagination | Config of pagination. You can ref table pagination [config](#pagination) or full [`pagination`](/components/pagination/) document, hide it by setting it to `false` | object \\| `false` | - |  |\n| rowClassName | Row's className | function(record, index): string | - |  |\n| rowKey | Row's unique key, could be a string or function that returns a string | string \\| function(record): string | `key` |  |\n| rowSelection | Row selection [config](#rowselection) | object | - |  |\n| scroll | Whether the table can be scrollable, [config](#scroll) | object | - |  |\n| showHeader | Whether to show table header | boolean | true |  |\n| showSorterTooltip | The header show next sorter direction tooltip. It will be set as the property of Tooltip if its type is object | boolean \\| [Tooltip props](/components/tooltip/#api) | true |  |\n| size | Size of table | `large` \\| `middle` \\| `small` | `large` |  |\n| sortDirections | Supported sort way, could be `ascend`, `descend` | Array | \\[`ascend`, `descend`] |  |\n| sticky | Set sticky header and scroll bar | boolean \\| `{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}` | - | 4.6.0 (getContainer: 4.7.0) |\n| summary | Summary content | (currentData) => ReactNode | - |  |\n| tableLayout | The [table-layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) attribute of table element | - \\| `auto` \\| `fixed` | -<hr />`fixed` when header/columns are fixed, or using `column.ellipsis` |  |\n| title | Table title renderer | function(currentPageData) | - |  |\n| onChange | Callback executed when pagination, filters or sorter is changed | function(pagination, filters, sorter, extra: { currentDataSource: \\[], action: `paginate` \\| `sort` \\| `filter` }) | - |  |\n| onHeaderRow | Set props on per header row | function(columns, index) | - |  |\n| onRow | Set props on per row | function(record, index) | - |  |\n| virtual | Support virtual list | boolean | - | 5.9.0 |\n\n#### onRow usage\n\nSame as `onRow` `onHeaderRow` `onCell` `onHeaderCell`\n\n```jsx\n<Table\n  onRow={(record, rowIndex) => {\n    return {\n      onClick: (event) => {}, // click row\n      onDoubleClick: (event) => {}, // double click row\n      onContextMenu: (event) => {}, // right button click row\n      onMouseEnter: (event) => {}, // mouse enter row\n      onMouseLeave: (event) => {}, // mouse leave row\n    };\n  }}\n  onHeaderRow={(columns, index) => {\n    return {\n      onClick: () => {}, // click header row\n    };\n  }}\n/>\n```\n\n### Column\n\nOne of the Table `columns` prop for describing the table's columns, Column has the same API.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| align | The specify which way that column is aligned | `left` \\| `right` \\| `center` | `left` |  |\n| className | The className of this column | string | - |  |\n| colSpan | Span of this column's title | number | - |  |\n| dataIndex | Display field of the data record, support nest path by string array | string \\| string\\[] | - |  |\n| defaultFilteredValue | Default filtered values | string\\[] | - |  |\n| filterResetToDefaultFilteredValue | click the reset button, whether to restore the default filter | boolean | false |  |\n| defaultSortOrder | Default order of sorted values | `ascend` \\| `descend` | - |  |\n| ellipsis | The ellipsis cell content, not working with sorter and filters for now.<br />tableLayout would be `fixed` when `ellipsis` is `true` or `{ showTitle?: boolean }` | boolean \\| {showTitle?: boolean } | false | showTitle: 4.3.0 |\n| filterDropdown | Customized filter overlay | ReactNode \\| (props: [FilterDropdownProps](https://github.com/@private-basic-components/@private-basic-components/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode | - |  |\n| filterDropdownOpen | Whether `filterDropdown` is visible | boolean | - |  |\n| filtered | Whether the `dataSource` is filtered | boolean | false |  |\n| filteredValue | Controlled filtered value, filter icon will highlight | string\\[] | - |  |\n| filterIcon | Customized filter icon | ReactNode \\| (filtered: boolean) => ReactNode | - |  |\n| filterMultiple | Whether multiple filters can be selected | boolean | true |  |\n| filterMode | To specify the filter interface | 'menu' \\| 'tree' | 'menu' | 4.17.0 |\n| filterSearch | Whether to be searchable for filter menu | boolean \\| function(input, record):boolean | false | boolean:4.17.0 function:4.19.0 |\n| filters | Filter menu config | object\\[] | - |  |\n| fixed | (IE not support) Set column to be fixed: `true`(same as left) `'left'` `'right'` | boolean \\| string | false |  |\n| key | Unique key of this column, you can ignore this prop if you've set a unique `dataIndex` | string | - |  |\n| render | Renderer of the table cell. The return value should be a ReactNode | function(text, record, index) {} | - |  |\n| responsive | The list of breakpoints at which to display this column. Always visible if not set | [Breakpoint](https://github.com/@private-basic-components/@private-basic-components/blob/015109b42b85c63146371b4e32b883cf97b088e8/components/_util/responsiveObserve.ts#L1)\\[] | - | 4.2.0 |\n| rowScope | Set scope attribute for all cells in this column | `row` \\| `rowgroup` | - | 5.1.0 |\n| shouldCellUpdate | Control cell render logic | (record, prevRecord) => boolean | - | 4.3.0 |\n| showSorterTooltip | If header show next sorter direction tooltip, override `showSorterTooltip` in table | boolean \\| [Tooltip props](/components/tooltip/) | true |  |\n| sortDirections | Supported sort way, override `sortDirections` in `Table`, could be `ascend`, `descend` | Array | \\[`ascend`, `descend`] |  |\n| sorter | Sort function for local sort, see [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)'s compareFunction. If you need sort buttons only, set to `true` | function \\| boolean \\| { compare: function, multiple: number } | - |  |\n| sortOrder | Order of sorted values: `ascend` `descend` `null` | `ascend` \\| `descend` \\| null | - |  |\n| sortIcon | Customized sort icon | (props: { sortOrder }) => ReactNode | - | 5.6.0 |\n| title | Title of this column | ReactNode \\| ({ sortOrder, sortColumn, filters }) => ReactNode | - |  |\n| width | Width of this column ([width not working?](https://github.com/@private-basic-components/@private-basic-components/issues/13825#issuecomment-449889241)) | string \\| number | - |  |\n| onCell | Set props on per cell | function(record, rowIndex) | - |  |\n| onFilter | Function that determines if the row is displayed when filtered | function(value, record) => boolean | - |  |\n| onFilterDropdownOpenChange | Callback executed when `filterDropdownOpen` is changed | function(visible) {} | - |  |\n| onHeaderCell | Set props on per header cell | function(column) | - |  |\n\n### ColumnGroup\n\n| Property | Description               | Type      | Default |\n| -------- | ------------------------- | --------- | ------- |\n| title    | Title of the column group | ReactNode | -       |\n\n### pagination\n\nProperties for pagination.\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| position | Specify the position of `Pagination`, could be`topLeft` \\| `topCenter` \\| `topRight` \\|`bottomLeft` \\| `bottomCenter` \\| `bottomRight` | Array | \\[`bottomRight`] |\n\nMore about pagination, please check [`Pagination`](/components/pagination/).\n\n### expandable\n\nProperties for expandable.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| childrenColumnName | The column contains children to display | string | children |  |\n| columnTitle | Set the title of the expand column | ReactNode | - | 4.23.0 |\n| columnWidth | Set the width of the expand column | string \\| number | - |  |\n| defaultExpandAllRows | Expand all rows initially | boolean | false |  |\n| defaultExpandedRowKeys | Initial expanded row keys | string\\[] | - |  |\n| expandedRowClassName | Expanded row's className | function(record, index, indent): string | - |  |\n| expandedRowKeys | Current expanded row keys | string\\[] | - |  |\n| expandedRowRender | Expanded container render for each row | function(record, index, indent, expanded): ReactNode | - |  |\n| expandIcon | Customize row expand Icon. Ref [example](https://codesandbox.io/s/fervent-bird-nuzpr) | function(props): ReactNode | - |  |\n| expandRowByClick | Whether to expand row by clicking anywhere in the whole row | boolean | false |  |\n| fixed | Whether the expansion icon is fixed. Optional true `left` `right` | boolean \\| string | false | 4.16.0 |\n| indentSize | Indent size in pixels of tree data | number | 15 |  |\n| rowExpandable | Enable row can be expandable | (record) => boolean | - |  |\n| showExpandColumn | Show expand column | boolean | true | 4.18.0 |\n| onExpand | Callback executed when the row expand icon is clicked | function(record, event) | - |  |\n| onExpandedRowsChange | Callback executed when the expanded rows change | function(expandedRows) | - |  |\n\n### rowSelection\n\nProperties for row selection.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| checkStrictly | Check table row precisely; parent row and children rows are not associated | boolean | true | 4.4.0 |\n| columnTitle | Set the title of the selection column | ReactNode | - |  |\n| columnWidth | Set the width of the selection column | string \\| number | `32px` |  |\n| fixed | Fixed selection column on the left | boolean | - |  |\n| getCheckboxProps | Get Checkbox or Radio props | function(record) | - |  |\n| hideSelectAll | Hide the selectAll checkbox and custom selection | boolean | false | 4.3.0 |\n| preserveSelectedRowKeys | Keep selection `key` even when it removed from `dataSource` | boolean | - | 4.4.0 |\n| renderCell | Renderer of the table cell. Same as `render` in column | function(checked, record, index, originNode) {} | - | 4.1.0 |\n| selectedRowKeys | Controlled selected row keys | string\\[] \\| number\\[] | \\[] |  |\n| selections | Custom selection [config](#selection), only displays default selections when set to `true` | object\\[] \\| boolean | - |  |\n| type | `checkbox` or `radio` | `checkbox` \\| `radio` | `checkbox` |  |\n| onCell | Set props on per cell. Same as `onCell` in column | function(record, rowIndex) | - | 5.5.0 |\n| onChange | Callback executed when selected rows change | function(selectedRowKeys, selectedRows, info: { type }) | - | `info.type`: 4.21.0 |\n| onSelect | Callback executed when select/deselect one row | function(record, selected, selectedRows, nativeEvent) | - |  |\n| onSelectAll | Callback executed when select/deselect all rows | function(selected, selectedRows, changeRows) | - |  |\n| onSelectInvert | Callback executed when row selection is inverted | function(selectedRowKeys) | - |  |\n| onSelectNone | Callback executed when row selection is cleared | function() | - |  |\n| onSelectMultiple | Callback executed when row selection is changed by pressing shift | function(selected, selectedRows, changeRows) | - |  |\n\n### scroll\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| scrollToFirstRowOnChange | Whether to scroll to the top of the table when paging, sorting, filtering changes | boolean | - |\n| x | Set horizontal scrolling, can also be used to specify the width of the scroll area, could be number, percent value, true and ['max-content'](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width#max-content) | string \\| number \\| true | - |\n| y | Set vertical scrolling, can also be used to specify the height of the scroll area, could be string or number | string \\| number | - |\n\n### selection\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| key | Unique key of this selection | string | - |\n| text | Display text of this selection | ReactNode | - |\n| onSelect | Callback executed when this selection is clicked | function(changeableRowKeys) | - |"
            },
            "Tabs": {
              "description": "@private-basic-components has 3 types of Tabs for different situations.\n\n- Card Tabs: for managing too many closeable views.\n- Normal Tabs: for functional aspects of a page.\n- [Radio.Button](/components/radio/#components-radio-demo-radiobutton): for secondary tabs.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Tabs\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| activeKey | Current TabPane's key | string | - |  |\n| addIcon | Customize add icon | ReactNode | - | 4.4.0 |\n| animated | Whether to change tabs with animation. | boolean \\| { inkBar: boolean, tabPane: boolean } | { inkBar: true, tabPane: false } |  |\n| centered | Centers tabs | boolean | false | 4.4.0 |\n| defaultActiveKey | Initial active TabPane's key, if `activeKey` is not set | string | - |  |\n| hideAdd | Hide plus icon or not. Only works while `type=\"editable-card\"` | boolean | false |  |\n| indicatorSize | Customize length of indicator, which is the same as tab by default | number \\| (origin: number) => number | - | 5.9.0 |\n| items | Configure tab content | [TabItemType](#tabitemtype) | [] | 4.23.0 |\n| moreIcon | The custom icon of ellipsis | ReactNode | &lt;EllipsisOutlined /> | 4.14.0 |\n| popupClassName | `className` for more dropdown. | string | - | 4.21.0 |\n| renderTabBar | Replace the TabBar | (props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement | - |  |\n| size | Preset tab bar size | `large` \\| `middle` \\| `small` | `middle` |  |\n| tabBarExtraContent | Extra content in tab bar | ReactNode \\| {left?: ReactNode, right?: ReactNode} | - | object: 4.6.0 |\n| tabBarGutter | The gap between tabs | number | - |  |\n| tabBarStyle | Tab bar style object | CSSProperties | - |  |\n| tabPosition | Position of tabs | `top` \\| `right` \\| `bottom` \\| `left` | `top` |  |\n| destroyInactiveTabPane | Whether destroy inactive TabPane when change tab | boolean | false |  |\n| type | Basic style of tabs | `line` \\| `card` \\| `editable-card` | `line` |  |\n| onChange | Callback executed when active tab is changed | function(activeKey) {} | - |  |\n| onEdit | Callback executed when tab is added or removed. Only works while `type=\"editable-card\"` | (action === 'add' ? event : targetKey, action): void | - |  |\n| onTabClick | Callback executed when tab is clicked | function(key: string, event: MouseEvent) | - |  |\n| onTabScroll | Trigger when tab scroll | function({ direction: `left` \\| `right` \\| `top` \\| `bottom` }) | - | 4.3.0 |\n\nMore option at [rc-tabs tabs](https://github.com/react-component/tabs#tabs)\n\n### TabItemType\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| closeIcon | Customize close icon in TabPane's head. Only works while `type=\"editable-card\"`. 5.7.0: close button will be hidden when setting to `null` or `false` | boolean \\| ReactNode | - |\n| disabled | Set TabPane disabled | boolean | false |\n| forceRender | Forced render of content in tabs, not lazy render after clicking on tabs | boolean | false |\n| key | TabPane's key | string | - |\n| label | TabPane's head display text | ReactNode | - |\n| children | TabPane's head display content | ReactNode | - |"
            },
            "Tag": {
              "description": "- It can be used to tag by dimension or property.\n\n- When categorizing.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Tag\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| closeIcon | Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false` | ReactNode | false | 4.4.0 |\n| color | Color of the Tag | string | - |  |\n| icon | Set the icon of tag | ReactNode | - |  |\n| bordered | Whether has border style | boolean | true | 5.4.0 |\n| onClose | Callback executed when tag is closed | (e) => void | - |  |\n\n### Tag.CheckableTag\n\n| Property | Description                                     | Type              | Default |\n| -------- | ----------------------------------------------- | ----------------- | ------- |\n| checked  | Checked status of Tag                           | boolean           | false   |\n| onChange | Callback executed when Tag is checked/unchecked | (checked) => void | -       |"
            },
            "TimePicker": {
              "description": "By clicking the input box, you can select a time from a popup panel.",
              "api": "---\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n```jsx\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\n\ndayjs.extend(customParseFormat)\n\n<TimePicker defaultValue={dayjs('13:30:56', 'HH:mm:ss')} />;\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Customize clear icon | boolean \\| { clearIcon?: ReactNode } | true | 5.8.0: Support object type |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| bordered | Whether has border style | boolean | true |  |\n| cellRender | Custom rendering function for picker cells | (current: number, info: { originNode: React.ReactElement, today: dayjs, range?: 'start' \\| 'end', subType: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| changeOnBlur | Trigger `change` when blur. e.g. datetime picker no need click confirm button | boolean | false | 5.5.0 |\n| className | The className of picker | string | - |  |\n| defaultValue | To set default time | [dayjs](http://day.js.org/) | - |  |\n| disabled | Determine whether the TimePicker is disabled | boolean | false |  |\n| disabledTime | To specify the time that cannot be selected | [DisabledTime](#disabledtime) | - | 4.19.0 |\n| format | To set the time format | string | `HH:mm:ss` |  |\n| getPopupContainer | To set the container of the floating layer, while the default is to create a div element in body | function(trigger) | - |  |\n| hideDisabledOptions | Whether hide the options that can not be selected | boolean | false |  |\n| hourStep | Interval between hours in picker | number | 1 |  |\n| inputReadOnly | Set the `readonly` attribute of the input tag (avoids virtual keyboard on touch devices) | boolean | false |  |\n| minuteStep | Interval between minutes in picker | number | 1 |  |\n| open | Whether to popup panel | boolean | false |  |\n| placeholder | Display when there's no value | string \\| \\[string, string] | `Select a time` |  |\n| placement | The position where the selection box pops up | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| popupClassName | The className of panel | string | - |  |\n| popupStyle | The style of panel | CSSProperties | - |  |\n| renderExtraFooter | Called from time picker panel to render some addon to its bottom | () => ReactNode | - |  |\n| secondStep | Interval between seconds in picker | number | 1 |  |\n| showNow | Whether to show `Now` button on panel | boolean | - | 4.4.0 |\n| size | To determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px | `large` \\| `middle` \\| `small` | - |  |\n| status | Set validation status | 'error' \\| 'warning' \\| 'success' \\| 'validating' | - | 4.19.0 |\n| suffixIcon | The custom suffix icon | ReactNode | - |  |\n| use12Hours | Display as 12 hours format, with default format `h:mm:ss a` | boolean | false |  |\n| value | To set time | [dayjs](http://day.js.org/) | - |  |\n| onChange | A callback function, can be executed when the selected time is changing | function(time: dayjs, timeString: string): void | - |  |\n| onOpenChange | A callback function which will be called while panel opening/closing | (open: boolean) => void | - |  |\n| onSelect | A callback function, executes when a value is selected | function(time: dayjs): void | - |  |\n\n#### DisabledTime\n\n```typescript\ntype DisabledTime = (now: Dayjs) => {\n  disabledHours?: () => number[];\n  disabledMinutes?: (selectedHour: number) => number[];\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\n};\n```"
            },
            "Timeline": {
              "description": "- When a series of information needs to be ordered by time (ascending or descending).\n- When you need a timeline to make a visual connection.\n\n<Alert message=\"After version 5.2.0, we provide a simpler usage &lt;Timeline items={[...]} /&gt; with better performance and potential of writing simpler code style in your applications. Meanwhile, we deprecated the old usage in browser console, we will remove it in @private-basic-components 6.0.\"></Alert>\n\n```jsx\n// works when >=5.2.0, recommended ✅\nconst items = [{ children: 'sample', label: 'sample' }];\nreturn <Timeline items={items} />;\n\n// works when <5.2.0, deprecated when >=5.2.0 🙅🏻‍♀️\nreturn (\n  <Timeline onChange={onChange}>\n    <Timeline.Item>Sample</Timeline.Item>\n  </Timeline>\n);\n```",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Timeline\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| mode | By sending `alternate` the timeline will distribute the nodes to the left and right | `left` \\| `alternate` \\| `right` | - |\n| pending | Set the last ghost node's existence or its content | boolean \\| ReactNode | false |\n| pendingDot | Set the dot of the last ghost node when pending is true | ReactNode | &lt;LoadingOutlined /&gt; |\n| reverse | Whether reverse nodes or not | boolean | false |\n| items | Each node of timeline | [Items](#Items)[] | 5.2.0 |\n\n### Items\n\nNode of timeline.\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| color | Set the circle's color to `blue`, `red`, `green`, `gray` or other custom colors | string | `blue` |\n| dot | Customize timeline dot | ReactNode | - |\n| label | Set the label | ReactNode | - |\n| children | Set the content | ReactNode | - |\n| position | Customize node position | `left` \\| `right` | - |"
            },
            "Tooltip": {
              "description": "- The tip is shown on mouse enter, and is hidden on mouse leave. The Tooltip doesn't support complex text or operations.\n- To provide an explanation of a `button/text/operation`. It's often used instead of the html `title` attribute.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description                   | Type                         | Default |\n| -------- | ----------------------------- | ---------------------------- | ------- |\n| title    | The text shown in the tooltip | ReactNode \\| () => ReactNode | -       |\n\n### Common API\n\nThe following APIs are shared by Tooltip, Popconfirm, Popover.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| align | This value will be merged into placement's config, please refer to the settings [rc-tooltip](https://github.com/react-component/tooltip) | object | - |  |\n| arrow | Change arrow's visible state and change whether the arrow is pointed at the center of target. | boolean \\| { pointAtCenter: boolean } | true | 5.2.0 |\n| autoAdjustOverflow | Whether to adjust popup placement automatically when popup is off screen | boolean | true |  |\n| color | The background color | string | - | 4.3.0 |\n| defaultOpen | Whether the floating tooltip card is open by default | boolean | false | 4.23.0 |\n| destroyTooltipOnHide | Whether destroy tooltip when hidden | boolean | false |  |\n| fresh | Tooltip will cache content when it is closed by default. Setting this property will always keep updating | boolean | false | 5.10.0 |\n| getPopupContainer | The DOM container of the tip, the default behavior is to create a `div` element in `body` | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |\n| mouseEnterDelay | Delay in seconds, before tooltip is shown on mouse enter | number | 0.1 |  |\n| mouseLeaveDelay | Delay in seconds, before tooltip is hidden on mouse leave | number | 0.1 |  |\n| overlayClassName | Class name of the tooltip card | string | - |  |\n| overlayStyle | Style of the tooltip card | object | - |  |\n| overlayInnerStyle | Style of the tooltip inner content | object | - |  |\n| placement | The position of the tooltip relative to the target, which can be one of `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string | `top` |  |\n| trigger | Tooltip trigger mode. Could be multiple by passing an array | `hover` \\| `focus` \\| `click` \\| `contextMenu` \\| Array&lt;string> | `hover` |  |\n| open | Whether the floating tooltip card is open or not. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open)) | boolean | false | 4.23.0 |\n| zIndex | Config `z-index` of Tooltip | number | - |  |\n| onOpenChange | Callback executed when visibility of the tooltip card is changed | (open: boolean) => void | - | 4.23.0 |"
            },
            "Tour": {
              "description": "Use when you want to guide users through a product.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Tour\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| arrow | Whether to show the arrow, including the configuration whether to point to the center of the element | `boolean`\\|`{ pointAtCenter: boolean}` | `true` |  |\n| closeIcon | Customize close icon | `React.ReactNode` | `true` | 5.9.0 |\n| placement | Position of the guide card relative to the target element | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | `bottom` |  |\n| onClose | Callback function on shutdown | `Function` | - |  |\n| mask | Whether to enable masking, change mask style and fill color by pass custom props | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` |  |\n| type | Type, affects the background color and text color | `default` `primary` | `default` |  |\n| open | Open tour | `boolean` | - |  |\n| onChange | Callback when the step changes. Current is the previous step | `(current: number) => void` | - |  |\n| current | What is the current step | `number` | - |  |\n| scrollIntoViewOptions | support pass custom scrollIntoView options | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |\n| indicatorsRender | custom indicator | `(current: number, total: number) => ReactNode` | - | 5.2.0 |\n| zIndex | Tour's zIndex | number | 1001 | 5.3.0 |\n\n### TourStep\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| target | Get the element the guide card points to. Empty makes it show in center of screen | `() => HTMLElement` `HTMLElement` | - |  |\n| arrow | Whether to show the arrow, including the configuration whether to point to the center of the element | `boolean` `{ pointAtCenter: boolean}` | `true` |  |\n| closeIcon | Customize close icon | `React.ReactNode` | `true` | 5.9.0 |\n| cover | Displayed pictures or videos | `ReactNode` | - |  |\n| title | title | `ReactNode` | - |  |\n| description | description | `ReactNode` | - |  |\n| placement | Position of the guide card relative to the target element | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | `bottom` |  |\n| onClose | Callback function on shutdown | `Function` | - |  |\n| mask | Whether to enable masking, change mask style and fill color by pass custom props, the default follows the `mask` property of Tour | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` |  |\n| type | Type, affects the background color and text color | `default` `primary` | `default` |  |\n| nextButtonProps | Properties of the Next button | `{ children: ReactNode; onClick: Function }` | - |  |\n| prevButtonProps | Properties of the previous button | `{ children: ReactNode; onClick: Function }` | - |  |\n| scrollIntoViewOptions | support pass custom scrollIntoView options, the default follows the `scrollIntoViewOptions` property of Tour | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |"
            },
            "Transfer": {
              "description": "- It is a select control essentially which can be use for selecting multiple items.\n- Transfer can display more information for items and take up more space.\n\nTransfer the elements between two columns in an intuitive and efficient way.\n\nOne or more elements can be selected from either column, one click on the proper `direction` button, and the transfer is done. The left column is considered the `source` and the right column is considered the `target`. As you can see in the API description, these names are reflected in.\n\n> notice: Transfer is a controlled component, uncontrolled mode is not supported.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| dataSource | Used for setting the source data. The elements that are part of this array will be present the left column. Except the elements whose keys are included in `targetKeys` prop | [RecordType extends TransferItem = TransferItem](https://github.com/@private-basic-components/@private-basic-components/blob/1bf0bab2a7bc0a774119f501806e3e0e3a6ba283/components/transfer/index.tsx#L12)\\[] | \\[] |  |\n| disabled | Whether disabled transfer | boolean | false |  |\n| selectionsIcon | custom dropdown icon | React.ReactNode |  | 5.8.0 |\n| filterOption | A function to determine whether an item should show in search result list, only works when searching, (add `direction` support since 5.9.0+) | (inputValue, option, direction: `left` \\| `right`): boolean | - |  |\n| footer | A function used for rendering the footer | (props, { direction }) => ReactNode | - | direction: 4.17.0 |\n| listStyle | A custom CSS style used for rendering the transfer columns | object \\| ({direction: `left` \\| `right`}) => object | - |  |\n| locale | The i18n text including filter, empty text, item unit, etc | { itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode \\| ReactNode[]; } | { itemUnit: `item`, itemsUnit: `items`, notFoundContent: `The list is empty`, searchPlaceholder: `Search here` } |  |\n| oneWay | Display as single direction style | boolean | false | 4.3.0 |\n| operations | A set of operations that are sorted from top to bottom | string\\[] | \\[`>`, `<`] |  |\n| operationStyle | A custom CSS style used for rendering the operations column | object | - |  |\n| pagination | Use pagination. Not work in render props | boolean \\| { pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean } | false | 4.3.0 |\n| render | The function to generate the item shown on a column. Based on an record (element of the dataSource array), this function should return a React element which is generated from that record. Also, it can return a plain object with `value` and `label`, `label` is a React element and `value` is for title | (record) => ReactNode | - |  |\n| selectAllLabels | A set of customized labels for select all checkboxes on the header | (ReactNode \\| (info: { selectedCount: number, totalCount: number }) => ReactNode)\\[] | - |  |\n| selectedKeys | A set of keys of selected items | string\\[] | \\[] |  |\n| showSearch | If included, a search box is shown on each column | boolean | false |  |\n| showSelectAll | Show select all checkbox on the header | boolean | true |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| targetKeys | A set of keys of elements that are listed on the right column | string\\[] | \\[] |  |\n| titles | A set of titles that are sorted from left to right | ReactNode\\[] | - |  |\n| onChange | A callback function that is executed when the transfer between columns is complete | (targetKeys, direction, moveKeys): void | - |  |\n| onScroll | A callback function which is executed when scroll options list | (direction, event): void | - |  |\n| onSearch | A callback function which is executed when search field are changed | (direction: `left` \\| `right`, value: string): void | - |  |\n| onSelectChange | A callback function which is executed when selected items are changed | (sourceSelectedKeys, targetSelectedKeys): void | - |  |\n\n### Render Props\n\nTransfer accept `children` to customize render list, using follow props:\n\n| Property        | Description             | Type                                 | Version |\n| --------------- | ----------------------- | ------------------------------------ | ------- |\n| direction       | List render direction   | `left` \\| `right`                    |         |\n| disabled        | Disable list or not     | boolean                              |         |\n| filteredItems   | Filtered items          | RecordType\\[]                        |         |\n| selectedKeys    | Selected items          | string\\[]                            |         |\n| onItemSelect    | Select item             | (key: string, selected: boolean)     |         |\n| onItemSelectAll | Select a group of items | (keys: string\\[], selected: boolean) |         |\n\n#### example\n\n```jsx\n<Transfer {...props}>{(listProps) => <YourComponent {...listProps} />}</Transfer>\n```"
            },
            "Tree": {
              "description": "Almost anything can be represented in a tree structure. Examples include directories, organization hierarchies, biological classifications, countries, etc. The `Tree` component is a way of representing the hierarchical relationship between these things. You can also expand, collapse, and select a treeNode within a `Tree`.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Tree props\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowDrop | Whether to allow dropping on the node | ({ dropNode, dropPosition }) => boolean | - |  |\n| autoExpandParent | Whether to automatically expand a parent treeNode | boolean | false |  |\n| blockNode | Whether treeNode fill remaining horizontal space | boolean | false |  |\n| checkable | Add a Checkbox before the treeNodes | boolean | false |  |\n| checkedKeys | (Controlled) Specifies the keys of the checked treeNodes (PS: When this specifies the key of a treeNode which is also a parent treeNode, all the children treeNodes of will be checked; and vice versa, when it specifies the key of a treeNode which is a child treeNode, its parent treeNode will also be checked. When `checkable` and `checkStrictly` is true, its object has `checked` and `halfChecked` property. Regardless of whether the child or parent treeNode is checked, they won't impact each other | string\\[] \\| {checked: string\\[], halfChecked: string\\[]} | \\[] |  |\n| checkStrictly | Check treeNode precisely; parent treeNode and children treeNodes are not associated | boolean | false |  |\n| defaultCheckedKeys | Specifies the keys of the default checked treeNodes | string\\[] | \\[] |  |\n| defaultExpandAll | Whether to expand all treeNodes by default | boolean | false |  |\n| defaultExpandedKeys | Specify the keys of the default expanded treeNodes | string\\[] | \\[] |  |\n| defaultExpandParent | If auto expand parent treeNodes when init | boolean | true |  |\n| defaultSelectedKeys | Specifies the keys of the default selected treeNodes | string\\[] | \\[] |  |\n| disabled | Whether disabled the tree | boolean | false |  |\n| draggable | Specifies whether this Tree or the node is draggable. Use `icon: false` to disable drag handler icon | boolean \\| ((node: DataNode) => boolean) \\| { icon?: React.ReactNode \\| false, nodeDraggable?: (node: DataNode) => boolean } | false | `config`: 4.17.0 |\n| expandedKeys | (Controlled) Specifies the keys of the expanded treeNodes | string\\[] | \\[] |  |\n| fieldNames | Customize node title, key, children field name | object | { title: `title`, key: `key`, children: `children` } | 4.17.0 |\n| filterTreeNode | Defines a function to filter (highlight) treeNodes. When the function returns `true`, the corresponding treeNode will be highlighted | function(node) | - |  |\n| height | Config virtual scroll height. Will not support horizontal scroll when enable this | number | - |  |\n| icon | Customize treeNode icon | ReactNode \\| (props) => ReactNode | - |  |\n| loadData | Load data asynchronously | function(node) | - |  |\n| loadedKeys | (Controlled) Set loaded tree nodes. Need work with `loadData` | string\\[] | \\[] |  |\n| multiple | Allows selecting multiple treeNodes | boolean | false |  |\n| rootStyle | Style on the root element | CSSProperties | - | 4.20.0 |\n| selectable | Whether can be selected | boolean | true |  |\n| selectedKeys | (Controlled) Specifies the keys of the selected treeNodes, multiple selection needs to set `multiple` to true | string\\[] | - |  |\n| showIcon | Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to true | boolean | false |  |\n| showLine | Shows a connecting line | boolean \\| {showLeafIcon: boolean \\| ReactNode \\| ((props: AntTreeNodeProps) => ReactNode)} | false |  |\n| switcherIcon | Customize collapse/expand icon of tree node | ReactNode \\| ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| titleRender | Customize tree node title render | (nodeData) => ReactNode | - | 4.5.0 |\n| treeData | The treeNodes data Array, if set it then you need not to construct children TreeNode. (key should be unique across the whole array) | array&lt;{ key, title, children, \\[disabled, selectable] }> | - |  |\n| virtual | Disable virtual scroll when set to false | boolean | true | 4.1.0 |\n| onCheck | Callback function for when the onCheck event occurs | function(checkedKeys, e:{checked: bool, checkedNodes, node, event, halfCheckedKeys}) | - |  |\n| onDragEnd | Callback function for when the onDragEnd event occurs | function({event, node}) | - |  |\n| onDragEnter | Callback function for when the onDragEnter event occurs | function({event, node, expandedKeys}) | - |  |\n| onDragLeave | Callback function for when the onDragLeave event occurs | function({event, node}) | - |  |\n| onDragOver | Callback function for when the onDragOver event occurs | function({event, node}) | - |  |\n| onDragStart | Callback function for when the onDragStart event occurs | function({event, node}) | - |  |\n| onDrop | Callback function for when the onDrop event occurs | function({event, node, dragNode, dragNodesKeys}) | - |  |\n| onExpand | Callback function for when a treeNode is expanded or collapsed | function(expandedKeys, {expanded: bool, node}) | - |  |\n| onLoad | Callback function for when a treeNode is loaded | function(loadedKeys, {event, node}) | - |  |\n| onRightClick | Callback function for when the user right clicks a treeNode | function({event, node}) | - |  |\n| onSelect | Callback function for when the user clicks a treeNode | function(selectedKeys, e:{selected: bool, selectedNodes, node, event}) | - |  |\n\n### TreeNode props\n\n| Property | Description | Type | Default |  |\n| --- | --- | --- | --- | --- |\n| checkable | When Tree is checkable, set TreeNode display Checkbox or not | boolean | - |  |\n| disableCheckbox | Disables the checkbox of the treeNode | boolean | false |  |\n| disabled | Disables the treeNode | boolean | false |  |\n| icon | Customize icon. When you pass component, whose render will receive full TreeNode props as component props | ReactNode \\| (props) => ReactNode | - |  |\n| isLeaf | Determines if this is a leaf node(effective when `loadData` is specified). `false` will force trade TreeNode as a parent node | boolean | - |  |\n| key | Used with (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys. P.S.: It must be unique in all of treeNodes of the tree | string | (internal calculated position of treeNode) |  |\n| selectable | Set whether the treeNode can be selected | boolean | true |  |\n| title | Title | ReactNode | `---` |  |\n\n### DirectoryTree props\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| expandAction | Directory open logic, optional: false \\| `click` \\| `doubleClick` | string \\| boolean | `click` |"
            },
            "TreeSelect": {
              "description": "`TreeSelect` is similar to `Select`, but the values are provided in a tree like structure. Any data whose entries are defined in a hierarchical manner is fit to use this control. Examples of such case may include a corporate hierarchy, a directory structure, and so on.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Tree props\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Customize clear icon | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: Support object type |\n| autoClearSearchValue | If auto clear search input value when multiple select is selected/deselected | boolean | true |  |\n| bordered | Whether has border style | boolean | true |  |\n| defaultValue | To set the initial selected treeNode(s) | string \\| string\\[] | - |  |\n| disabled | Disabled or not | boolean | false |  |\n| popupClassName | The className of dropdown menu | string | - | 4.23.0 |\n| popupMatchSelectWidth | Determine whether the popup menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll | boolean \\| number | true | 5.5.0 |\n| dropdownRender | Customize dropdown content | (originNode: ReactNode, props) => ReactNode | - |  |\n| dropdownStyle | To set the style of the dropdown menu | CSSProperties | - |  |\n| fieldNames | Customize node label, value, children field name | object | { label: `label`, value: `value`, children: `children` } | 4.17.0 |\n| filterTreeNode | Whether to filter treeNodes by input value. The value of `treeNodeFilterProp` is used for filtering by default | boolean \\| function(inputValue: string, treeNode: TreeNode) (should return boolean) | function |  |\n| getPopupContainer | To set the container of the dropdown menu. The default is to create a `div` element in `body`, you can reset it to the scrolling area and make a relative reposition. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body |  |\n| labelInValue | Whether to embed label in value, turn the format of value from `string` to {value: string, label: ReactNode, halfChecked: string\\[]} | boolean | false |  |\n| listHeight | Config popup height | number | 256 |  |\n| loadData | Load data asynchronously. Will not load when filtering. Check FAQ for more info | function(node) | - |  |\n| maxTagCount | Max tag count to show. `responsive` will cost render performance | number \\| `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | Placeholder for not showing tags | ReactNode \\| function(omittedValues) | - |  |\n| maxTagTextLength | Max tag text length to show | number | - |  |\n| multiple | Support multiple or not, will be `true` when enable `treeCheckable` | boolean | false |  |\n| notFoundContent | Specify content to show when no result matches | ReactNode | `Not Found` |  |\n| placeholder | Placeholder of the select input | string | - |  |\n| placement | The position where the selection box pops up | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| searchValue | Work with `onSearch` to make search value controlled | string | - |  |\n| showCheckedStrategy | The way show selected item in box when `treeCheckable` set. **Default:** just show child nodes. **`TreeSelect.SHOW_ALL`:** show all checked treeNodes (include parent treeNode). **`TreeSelect.SHOW_PARENT`:** show checked treeNodes (just show parent treeNode) | `TreeSelect.SHOW_ALL` \\| `TreeSelect.SHOW_PARENT` \\| `TreeSelect.SHOW_CHILD` | `TreeSelect.SHOW_CHILD` |  |\n| showSearch | Support search or not | boolean | single: false \\| multiple: true |  |\n| size | To set the size of the select input | `large` \\| `middle` \\| `small` | - |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| suffixIcon | The custom suffix icon | ReactNode | `<DownOutlined />` |  |\n| switcherIcon | Customize collapse/expand icon of tree node | ReactNode \\| ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| tagRender | Customize tag render when `multiple` | (props) => ReactNode | - |  |\n| treeCheckable | Whether to show checkbox on the treeNodes | boolean | false |  |\n| treeCheckStrictly | Whether to check nodes precisely (in the `checkable` mode), means parent and child nodes are not associated, and it will make `labelInValue` be true | boolean | false |  |\n| treeData | Data of the treeNodes, manual construction work is no longer needed if this property has been set(ensure the Uniqueness of each value) | array&lt;{ value, title, children, \\[disabled, disableCheckbox, selectable, checkable] }> | \\[] |  |\n| treeDataSimpleMode | Enable simple mode of treeData. Changes the `treeData` schema to: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...] where pId is parent node's id). It is possible to replace the default `id` and `pId` keys by providing object to `treeDataSimpleMode` | boolean \\| object&lt;{ id: string, pId: string, rootPId: string }> | false |  |\n| treeDefaultExpandAll | Whether to expand all treeNodes by default | boolean | false |  |\n| treeDefaultExpandedKeys | Default expanded treeNodes | string\\[] | - |  |\n| treeExpandAction | Tree title open logic when click, optional: false \\| `click` \\| `doubleClick` | string \\| boolean | false | 4.21.0 |\n| treeExpandedKeys | Set expanded keys | string\\[] | - |  |\n| treeIcon | Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to `true` | boolean | false |  |\n| treeLoadedKeys | (Controlled) Set loaded tree nodes, work with `loadData` only | string[] | [] |  |\n| treeLine | Show the line. Ref [Tree - showLine](/components/tree/#components-tree-demo-line) | boolean \\| object | false | 4.17.0 |\n| treeNodeFilterProp | Will be used for filtering if `filterTreeNode` returns true | string | `value` |  |\n| treeNodeLabelProp | Will render as content of select | string | `title` |  |\n| value | To set the current selected treeNode(s) | string \\| string\\[] | - |  |\n| virtual | Disable virtual scroll when set to false | boolean | true | 4.1.0 |\n| onChange | A callback function, can be executed when selected treeNodes or input value change | function(value, label, extra) | - |  |\n| onDropdownVisibleChange | Called when dropdown open | function(open) | - |  |\n| onSearch | A callback function, can be executed when the search input changes | function(value: string) | - |  |\n| onSelect | A callback function, can be executed when you select a treeNode | function(value, node, extra) | - |  |\n| onTreeExpand | A callback function, can be executed when treeNode expanded | function(expandedKeys) | - |  |\n\n### Tree Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n### TreeNode props\n\n> We recommend you to use `treeData` rather than `TreeNode`, to avoid the trouble of manual construction.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| checkable | When Tree is checkable, set TreeNode display Checkbox or not | boolean | - |  |\n| disableCheckbox | Disables the checkbox of the treeNode | boolean | false |  |\n| disabled | Disabled or not | boolean | false |  |\n| isLeaf | Leaf node or not | boolean | false |  |\n| key | Required property (unless using `treeDataSimpleMode`), should be unique in the tree | string | - |  |\n| selectable | Whether can be selected | boolean | true |  |\n| title | Content showed on the treeNodes | ReactNode | `---` |  |\n| value | Will be treated as `treeNodeFilterProp` by default, should be unique in the tree | string | - |  |"
            },
            "Typography": {
              "description": "- When need to display a title or paragraph contents in Articles/Blogs/Notes.\n- When you need copyable/editable/ellipsis texts.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Typography.Text\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| code | Code style | boolean | false |  |\n| copyable | Whether to be copyable, customize it via setting an object | boolean \\| [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | Deleted line style | boolean | false |  |\n| disabled | Disabled content | boolean | false |  |\n| editable | If editable. Can control edit state when is object | boolean \\| [editable](#editable) | false | [editable](#editable) |\n| ellipsis | Display ellipsis when text overflows, can't configure expandable、rows and onExpand by using object. Diff with Typography.Paragraph, Text do not have 100% width style which means it will fix width on the first ellipsis. If you want to have responsive ellipsis, please set width manually | boolean \\| [Omit<ellipsis, 'expandable' \\| 'rows' \\| 'onExpand'>](#ellipsis) | false | [ellipsis](#ellipsis) |\n| keyboard | Keyboard style | boolean | false | 4.3.0 |\n| mark | Marked style | boolean | false |  |\n| onClick | Set the handler to handle click event | (event) => void | - |  |\n| strong | Bold style | boolean | false |  |\n| italic | Italic style | boolean | false | 4.16.0 |\n| type | Content type | `secondary` \\| `success` \\| `warning` \\| `danger` | - | success: 4.6.0 |\n| underline | Underlined style | boolean | false |  |\n\n### Typography.Title\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| code | Code style | boolean | false |  |\n| copyable | Whether to be copyable, customize it via setting an object | boolean \\| [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | Deleted line style | boolean | false |  |\n| disabled | Disabled content | boolean | false |  |\n| editable | If editable. Can control edit state when is object | boolean \\| [editable](#editable) | false | [editable](#editable) |\n| ellipsis | Display ellipsis when text overflows, can configure rows and expandable by using object | boolean \\| [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| level | Set content importance. Match with `h1`, `h2`, `h3`, `h4`, `h5` | number: 1, 2, 3, 4, 5 | 1 | 5: 4.6.0 |\n| mark | Marked style | boolean | false |  |\n| onClick | Set the handler to handle click event | (event) => void | - |  |\n| italic | Italic style | boolean | false | 4.16.0 |\n| type | Content type | `secondary` \\| `success` \\| `warning` \\| `danger` | - | success: 4.6.0 |\n| underline | Underlined style | boolean | false |  |\n\n### Typography.Paragraph\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| code | Code style | boolean | false |  |\n| copyable | Whether to be copyable, customize it via setting an object | boolean \\| [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | Deleted line style | boolean | false |  |\n| disabled | Disabled content | boolean | false |  |\n| editable | If editable. Can control edit state when is object | boolean \\| [editable](#editable) | false | [editable](#editable) |\n| ellipsis | Display ellipsis when text overflows, can configure rows and expandable by using object | boolean \\| [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| mark | Marked style | boolean | false |  |\n| onClick | Set the handler to handle click event | (event) => void | - |  |\n| strong | Bold style | boolean | false |  |\n| italic | Italic style | boolean | false | 4.16.0 |\n| type | Content type | `secondary` \\| `success` \\| `warning` \\| `danger` | - | success: 4.6.0 |\n| underline | Underlined style | boolean | false |  |\n\n### copyable\n\n    {\n      text: string,\n      onCopy: function(event),\n      icon: ReactNode,\n      tooltips: false | [ReactNode, ReactNode],\n      format: 'text/plain' | 'text/html',\n    }\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| format | The Mime Type of the text | 'text/plain' \\| 'text/html' | - | 4.21.0 |\n| icon | Custom copy icon: \\[copyIcon, copiedIcon] | \\[ReactNode, ReactNode] | - | 4.6.0 |\n| text | The text to copy | string | - |  |\n| tooltips | Custom tooltip text, hide when it is false | \\[ReactNode, ReactNode] | \\[`Copy`, `Copied`] | 4.4.0 |\n| onCopy | Called when copied text | function | - |  |\n\n### editable\n\n    {\n      icon: ReactNode,\n      tooltip: boolean | ReactNode,\n      editing: boolean,\n      maxLength: number,\n      autoSize: boolean | { minRows: number, maxRows: number },\n      text: string,\n      onChange: function(string),\n      onCancel: function,\n      onStart: function,\n      onEnd: function,\n      triggerType: ('icon' | 'text')[],\n      enterIcon: ReactNode,\n    }\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoSize | `autoSize` attribute of textarea | boolean \\| { minRows: number, maxRows: number } | - | 4.4.0 |\n| editing | Whether to be editable | boolean | false |  |\n| icon | Custom editable icon | ReactNode | &lt;EditOutlined /> | 4.6.0 |\n| maxLength | `maxLength` attribute of textarea | number | - | 4.4.0 |\n| tooltip | Custom tooltip text, hide when it is false | boolean \\| ReactNode | `Edit` | 4.6.0 |\n| text | Edit text, specify the editing content instead of using the children implicitly | string | - | 4.24.0 |\n| onChange | Called when input at textarea | function(value: string) | - |  |\n| onCancel | Called when type ESC to exit editable state | function | - |  |\n| onStart | Called when enter editable state | function | - |  |\n| onEnd | Called when type ENTER to exit editable state | function | - | 4.14.0 |\n| triggerType | Edit mode trigger - icon, text or both (not specifying icon as trigger hides it) | Array&lt;`icon`\\|`text`> | \\[`icon`] |  |\n| enterIcon | Custom \"enter\" icon in the edit field (passing `null` removes the icon) | ReactNode | `<EnterOutlined />` | 4.17.0 |\n\n### ellipsis\n\n    {\n      rows: number,\n      expandable: boolean,\n      suffix: string,\n      symbol: ReactNode,\n      tooltip: boolean | ReactNode | TooltipProps,\n      onExpand: function(event),\n      onEllipsis: function(ellipsis),\n    }\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| expandable | Whether to be expandable | boolean | - |  |\n| rows | Max rows of content | number | - |  |\n| suffix | Suffix of ellipsis content | string | - |  |\n| symbol | Custom description of ellipsis | ReactNode | `Expand` |  |\n| tooltip | Show tooltip when ellipsis | boolean \\| ReactNode \\| [TooltipProps](/components/tooltip/#api) | - | 4.11.0 |\n| onEllipsis | Called when enter or leave ellipsis state | function(ellipsis) | - | 4.2.0 |\n| onExpand | Called when expand content | function(event) | - |  |"
            },
            "Upload": {
              "description": "Uploading is the process of publishing information (web pages, text, pictures, video, etc.) to a remote server via a web page or upload tool.\n\n- When you need to upload one or more files.\n- When you need to show the process of uploading.\n- When you need to upload files by dragging and dropping.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| accept | File types that can be accepted. See [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) | string | - |  |\n| action | Uploading URL | string \\| (file) => Promise&lt;string> | - |  |\n| beforeUpload | Hook function which will be executed before uploading. Uploading will be stopped with `false` or a rejected Promise returned. When returned value is `Upload.LIST_IGNORE`, the list of files that have been uploaded will ignore it. **Warning：this function is not supported in IE9** | (file, fileList) => boolean \\| Promise&lt;File> \\| `Upload.LIST_IGNORE` | - |  |\n| customRequest | Override for the default xhr behavior allowing for additional customization and the ability to implement your own XMLHttpRequest | function | - |  |\n| data | Uploading extra params or function which can return uploading extra params | object \\| (file) => object \\| Promise&lt;object> | - |  |\n| defaultFileList | Default list of files that have been uploaded | object\\[] | - |  |\n| directory | Support upload whole directory ([caniuse](https://caniuse.com/#feat=input-file-directory)) | boolean | false |  |\n| disabled | Disable upload button | boolean | false |  |\n| fileList | List of files that have been uploaded (controlled). Here is a common issue [#2423](https://github.com/@private-basic-components/@private-basic-components/issues/2423) when using it | [UploadFile](#uploadfile)\\[] | - |  |\n| headers | Set request headers, valid above IE10 | object | - |  |\n| iconRender | Custom show icon | (file: UploadFile, listType?: UploadListType) => ReactNode | - |  |\n| isImageUrl | Customize if render &lt;img /> in thumbnail | (file: UploadFile) => boolean | [(inside implementation)](https://github.com/@private-basic-components/@private-basic-components/blob/4ad5830eecfb87471cd8ac588c5d992862b70770/components/upload/utils.tsx#L47-L68) |  |\n| itemRender | Custom item of uploadList | (originNode: ReactElement, file: UploadFile, fileList: object\\[], actions: { download: function, preview: function, remove: function }) => React.ReactNode | - | 4.16.0 |\n| listType | Built-in stylesheets, support for four types: `text`, `picture`, `picture-card` or `picture-circle` | string | `text` | `picture-circle`(5.2.0+) |\n| maxCount | Limit the number of uploaded files. Will replace current one when `maxCount` is `1` | number | - | 4.10.0 |\n| method | The http method of upload request | string | `post` |  |\n| multiple | Whether to support selected multiple files. `IE10+` supported. You can select multiple files with CTRL holding down while multiple is set to be true | boolean | false |  |\n| name | The name of uploading file | string | `file` |  |\n| openFileDialogOnClick | Click open file dialog | boolean | true |  |\n| previewFile | Customize preview file logic | (file: File \\| Blob) => Promise&lt;dataURL: string> | - |  |\n| progress | Custom progress bar | [ProgressProps](/components/progress/#api) (support `type=\"line\"` only) | { strokeWidth: 2, showInfo: false } | 4.3.0 |\n| showUploadList | Whether to show default upload list, could be an object to specify `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` and `downloadIcon` individually | boolean \\| { showPreviewIcon?: boolean, showDownloadIcon?: boolean, showRemoveIcon?: boolean, previewIcon?: ReactNode \\| (file: UploadFile) => ReactNode, removeIcon?: ReactNode \\| (file: UploadFile) => ReactNode, downloadIcon?: ReactNode \\| (file: UploadFile) => ReactNode } | true | function: 4.7.0 |\n| withCredentials | The ajax upload with cookie sent | boolean | false |  |\n| onChange | A callback function, can be executed when uploading state is changing. It will trigger by every uploading phase. see [onChange](#onchange) | function | - |  |\n| onDrop | A callback function executed when files are dragged and dropped into the upload area | (event: React.DragEvent) => void | - | 4.16.0 |\n| onDownload | Click the method to download the file, pass the method to perform the method logic, and do not pass the default jump to the new TAB | function(file): void | (Jump to new TAB) |  |\n| onPreview | A callback function, will be executed when the file link or preview icon is clicked | function(file) | - |  |\n| onRemove | A callback function, will be executed when removing file button is clicked, remove event will be prevented when the return value is false or a Promise which resolve(false) or reject | function(file): boolean \\| Promise | - |  |\n\n### UploadFile\n\nExtends File with additional props.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| crossOrigin | CORS settings attributes | `'anonymous'` \\| `'use-credentials'` \\| `''` | - | 4.20.0 |\n| name | File name | string | - | - |\n| percent | Upload progress percent | number | - | - |\n| status | Upload status. Show different style when configured | `error` \\| `done` \\| `uploading` \\| `removed` | - | - |\n| thumbUrl | Thumb image url | string | - | - |\n| uid | unique id. Will auto-generate when not provided | string | - | - |\n| url | Download url | string | - | - |\n\n### onChange\n\n> 💡 The function will be called when uploading is in progress, completed, or failed.\n\nWhen uploading state change, it returns:\n\n```jsx\n{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n```\n\n1. `file` File object for the current operation.\n\n   ```jsx\n   {\n      uid: 'uid',      // unique identifier, negative is recommended, to prevent interference with internally generated id\n      name: 'xx.png',   // file name\n      status: 'done' | 'uploading' | 'error' | 'removed', // Intercepted file by beforeUpload doesn't have a status field.\n      response: '{\"status\": \"success\"}', // response from server\n      linkProps: '{\"download\": \"image\"}', // additional HTML props of file link\n      xhr: 'XMLHttpRequest{ ... }', // XMLHttpRequest Header\n   }\n   ```\n\n2. `fileList` current list of files\n\n3. `event` response from the server, including uploading progress, supported by advanced browsers."
            },
            "Watermark": {
              "description": "- Use when the page needs to be watermarked to identify the copyright.\n- Suitable for preventing information theft.",
              "api": "Common props ref：[Common props](/docs/react/common-props)\n\n### Watermark\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| width | The width of the watermark, the default value of `content` is its own width | number | 120 |  |\n| height | The height of the watermark, the default value of `content` is its own height | number | 64 |  |\n| rotate | When the watermark is drawn, the rotation Angle, unit `°` | number | -22 |  |\n| zIndex | The z-index of the appended watermark element | number | 9 |  |\n| image | Image source, it is recommended to export 2x or 3x image, high priority (support base64 format) | string | - |  |\n| content | Watermark text content | string \\| string[] | - |  |\n| font | Text style | [Font](#font) | [Font](#font) |  |\n| gap | The spacing between watermarks | \\[number, number\\] | \\[100, 100\\] |  |\n| offset | The offset of the watermark from the upper left corner of the container. The default is `gap/2` | \\[number, number\\] | \\[gap\\[0\\]/2, gap\\[1\\]/2\\] |  |\n\n### Font\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| color | font color | [CanvasFillStrokeStyles.fillStyle](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle) | rgba(0,0,0,.15) |  |\n| fontSize | font size | number | 16 |  |\n| fontWeight | font weight | `normal` \\| `light` \\| `weight` \\| number | normal |  |\n| fontFamily | font family | string | sans-serif |  |\n| fontStyle | font style  | `none` \\| `normal` \\| `italic` \\| `oblique` | normal |  |\n| textAlign | specify the text alignment direction  | [CanvasTextAlign](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign) | `center` | 5.10.0 |"
            }
          }
        }
      }
    ]
  },
  {
    "title": "Arco Design Codegen",
    "description": "Code generator based on Vue3 and Arco Design",
    "fullStack": "Vue",
    "guides": [
      "Generate a login page",
      "Generate a Table component, include 3 columns: name, age, address"
    ],
    "model": "gpt-4o",
    "codeRendererUrl": "http://localhost:3006",
    "rules": [
      {
        "type": "styles",
        "description": "Define the rules for generating styles",
        "prompt": "Styles must be written using tailwindcss, and the component must be responsive."
      },
      {
        "type": "public-components",
        "description": "Define which public components to use",
        "dataSet": ["@arco-design/web-vue"]
      },
      {
        "type": "file-structure",
        "description": "Define the file structure for the project",
        "prompt": "Output component code in XML format as follows:\\n<ComponentArtifact name=\"ComponentName\">\\n  <ComponentFile fileName=\"App.vue\" isEntryFile=\"true\">\\n    import { ComponentName } from './ComponentName';\\n    \\n    const mockProps = {\\n      // Define mock data here\\n    };\\n    \\n    export default function App() {\\n      return <ComponentName {...mockProps} />;\\n    }\\n  </ComponentFile>\\n  \\n  <ComponentFile fileName=\"[ComponentName].vue\">\\n    // Main component implementation\\n    // Split into multiple files if exceeds 500 lines\\n    export const ComponentName = () => {\\n      // Component implementation\\n    }\\n  </ComponentFile>\\n\\n  <ComponentFile fileName=\"helpers.ts\">\\n    // Helper functions (optional)\\n  </ComponentFile>\\n\\n  <ComponentFile fileName=\"interface.ts\">\\n    // Type definitions for component props\\n    // All API-interacting data must be defined as props:\\n    // - initialData for component initialization\\n    // - onChange, onSave, onDelete etc. for data modifications\\n  </ComponentFile>\\n  </ComponentArtifact>"
      },
      {
        "type": "attention-rules",
        "description": "Attention rules for the code generator",
        "prompt": "Components have been globally registered, use component names with 'a-' prefix directly in templates (e.g., <a-button>). No need to import @arco-design/web-vue components in each component file. If types or utility functions are needed in script section, use named imports, e.g.: import { type ButtonProps } from '@arco-design/web-vue'. Do not use default imports, namespace imports, or side effect imports. Only use vue and @arco-design/web-vue packages."
      }
    ]
  },
  {
    "title": "Vant UI Codegen",
    "description": "Code generator based on Vue3 and Vant UI(Vant 4) for mobile web apps.",
    "fullStack": "Vue",
    "guides": [
      "Generate a mobile web app's login page",
      "Generate a mobile web app's home page",
      "Generate a mobile web app's user center page"
    ],
    "model": "gpt-4o",
    "codeRendererUrl": "http://localhost:3008",
    "rules": [
      {
        "type": "styles",
        "description": "Define the rules for generating styles",
        "prompt": "Styles must be written using tailwindcss, and the component must be responsive."
      },
      {
        "type": "public-components",
        "description": "Define which public components to use",
        "dataSet": ["vant"]
      },
      {
        "type": "file-structure",
        "description": "Define the file structure for the project",
        "prompt": "Output component code in XML format as follows:\\n<ComponentArtifact name=\"ComponentName\">\\n  <ComponentFile fileName=\"App.vue\" isEntryFile=\"true\">\\n    import { ComponentName } from './ComponentName';\\n    \\n    const mockProps = {\\n      // Define mock data here\\n    };\\n    \\n    export default function App() {\\n      return <ComponentName {...mockProps} />;\\n    }\\n  </ComponentFile>\\n  \\n  <ComponentFile fileName=\"[ComponentName].vue\">\\n    // Main component implementation\\n    // Split into multiple files if exceeds 500 lines\\n    export const ComponentName = () => {\\n      // Component implementation\\n    }\\n  </ComponentFile>\\n\\n  <ComponentFile fileName=\"helpers.ts\">\\n    // Helper functions (optional)\\n  </ComponentFile>\\n\\n  <ComponentFile fileName=\"interface.ts\">\\n    // Type definitions for component props\\n    // All API-interacting data must be defined as props:\\n    // - initialData for component initialization\\n    // - onChange, onSave, onDelete etc. for data modifications\\n  </ComponentFile>\\n  </ComponentArtifact>"
      },
      {
        "type": "attention-rules",
        "description": "Attention rules for the code generator",
        "prompt": "Components have been globally registered, use component names with 'van-' prefix directly in templates (e.g., <van-button>). No need to import vant components in each component file. If types or utility functions are needed in script section, use named imports, e.g.: import { type ButtonProps } from 'vant'. Do not use default imports, namespace imports, or side effect imports. Only use vue and vant packages. Use vant@4+ as the version of vant. All design components must for mobile web apps. All code must be written in Vue3 syntax."
      }
    ]
  }
]
